# SPDX-License-Identifier: MIT OR Apache-2.0
# SPDX-FileCopyrightText: Critical Section GmbH


msgid ""
msgstr ""
"Project-Id-Version: Ferrocene Language Specification \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-27 20:36+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../<rst_prolog>:4
msgid ""
"You're reading a draft of the Ferrocene Language Specification. Some "
"parts of this document might be missing, incomplete or incorrect. Our aim"
" is to have the specification ready by the end of 2022."
msgstr ""

#: ../../src/types-and-traits.rst:9
msgid "Types and Traits"
msgstr ""

#: ../../src/types-and-traits.rst:11
msgid ""
":dp:`fls_4rhjpdu4zfqj` A :t:`type` defines a set of :t:`[value]s` and a "
"set of operations that act on those :t:`[value]s`."
msgstr ""

#: ../../src/types-and-traits.rst:16 ../../src/types-and-traits.rst:457
#: ../../src/types-and-traits.rst:496 ../../src/types-and-traits.rst:553
#: ../../src/types-and-traits.rst:594 ../../src/types-and-traits.rst:711
#: ../../src/types-and-traits.rst:783 ../../src/types-and-traits.rst:922
#: ../../src/types-and-traits.rst:972 ../../src/types-and-traits.rst:1004
#: ../../src/types-and-traits.rst:1057 ../../src/types-and-traits.rst:1091
#: ../../src/types-and-traits.rst:1138 ../../src/types-and-traits.rst:1168
#: ../../src/types-and-traits.rst:1200 ../../src/types-and-traits.rst:1224
#: ../../src/types-and-traits.rst:2223 ../../src/types-and-traits.rst:2340
#: ../../src/types-and-traits.rst:2411
msgid "Syntax"
msgstr ""

#: ../../src/types-and-traits.rst:49
msgid "Type Classification"
msgstr ""

#: ../../src/types-and-traits.rst:52 ../../src/types-and-traits.rst:154
#: ../../src/types-and-traits.rst:339 ../../src/types-and-traits.rst:362
#: ../../src/types-and-traits.rst:375 ../../src/types-and-traits.rst:467
#: ../../src/types-and-traits.rst:503 ../../src/types-and-traits.rst:529
#: ../../src/types-and-traits.rst:565 ../../src/types-and-traits.rst:621
#: ../../src/types-and-traits.rst:740 ../../src/types-and-traits.rst:790
#: ../../src/types-and-traits.rst:819 ../../src/types-and-traits.rst:888
#: ../../src/types-and-traits.rst:941 ../../src/types-and-traits.rst:979
#: ../../src/types-and-traits.rst:1011 ../../src/types-and-traits.rst:1067
#: ../../src/types-and-traits.rst:1101 ../../src/types-and-traits.rst:1145
#: ../../src/types-and-traits.rst:1175 ../../src/types-and-traits.rst:1207
#: ../../src/types-and-traits.rst:1234 ../../src/types-and-traits.rst:1263
#: ../../src/types-and-traits.rst:1368 ../../src/types-and-traits.rst:1431
#: ../../src/types-and-traits.rst:1496 ../../src/types-and-traits.rst:1554
#: ../../src/types-and-traits.rst:1575 ../../src/types-and-traits.rst:1599
#: ../../src/types-and-traits.rst:1756 ../../src/types-and-traits.rst:1962
#: ../../src/types-and-traits.rst:2236 ../../src/types-and-traits.rst:2291
#: ../../src/types-and-traits.rst:2369 ../../src/types-and-traits.rst:2424
#: ../../src/types-and-traits.rst:2447 ../../src/types-and-traits.rst:2573
msgid "Legality Rules"
msgstr ""

#: ../../src/types-and-traits.rst:53
msgid ""
":dp:`fls_c4xe3pkn0n3o` :t:`[Type]s` are organized in the following "
"categories:"
msgstr ""

#: ../../src/types-and-traits.rst:56
msgid ":dp:`fls_69zyas59o8ff` :t:`[Scalar type]s`"
msgstr ""

#: ../../src/types-and-traits.rst:59
msgid ":dp:`fls_65hcyqizo1da` :t:`Bool` :t:`type`"
msgstr ""

#: ../../src/types-and-traits.rst:62
msgid ":dp:`fls_zge99l49az8w` :c:`Char` :t:`type`"
msgstr ""

#: ../../src/types-and-traits.rst:65
msgid ":dp:`fls_vizoconv3ir` :t:`[Numeric type]s`"
msgstr ""

#: ../../src/types-and-traits.rst:68
msgid ":dp:`fls_ne6bgnh1eyrj` :t:`Floating-point type`"
msgstr ""

#: ../../src/types-and-traits.rst:71
msgid ":dp:`fls_jvj8l8366kl2` :t:`Integer type`"
msgstr ""

#: ../../src/types-and-traits.rst:74
msgid ":dp:`fls_eek1jn1rwjh9` :t:`[Sequence type]s`"
msgstr ""

#: ../../src/types-and-traits.rst:77
msgid ":dp:`fls_s0aduyvz4i7f` :t:`Array type`"
msgstr ""

#: ../../src/types-and-traits.rst:80
msgid ":dp:`fls_zb5e79ai7w5i` :t:`Slice type`"
msgstr ""

#: ../../src/types-and-traits.rst:83
msgid ":dp:`fls_yjp19vt46asy` :c:`Str` :t:`type`"
msgstr ""

#: ../../src/types-and-traits.rst:86
msgid ":dp:`fls_xflj5df6upc7` :t:`Tuple type`"
msgstr ""

#: ../../src/types-and-traits.rst:89
msgid ":dp:`fls_u43jnp9jnw29` :t:`[Abstract data type]s`"
msgstr ""

#: ../../src/types-and-traits.rst:92
msgid ":dp:`fls_lric8bf631nw` :t:`Enum type`"
msgstr ""

#: ../../src/types-and-traits.rst:95
msgid ":dp:`fls_98djh9avlqc0` :t:`Struct type`"
msgstr ""

#: ../../src/types-and-traits.rst:98
msgid ":dp:`fls_b3ymsm8dmo4` :t:`Union type`"
msgstr ""

#: ../../src/types-and-traits.rst:101
msgid ":dp:`fls_9x5atvhdq0j2` :t:`[Function type]s`"
msgstr ""

#: ../../src/types-and-traits.rst:104
msgid ":dp:`fls_n5rgqgnxk9to` :t:`Closure type`"
msgstr ""

#: ../../src/types-and-traits.rst:107
msgid ":dp:`fls_s7ndqc5sizdy` :t:`Function item type`"
msgstr ""

#: ../../src/types-and-traits.rst:110
msgid ":dp:`fls_jrohsv7hx7yw` :t:`[Indirection type]s`"
msgstr ""

#: ../../src/types-and-traits.rst:113
msgid ":dp:`fls_1kg1mknf4yx7` :t:`Function pointer type`"
msgstr ""

#: ../../src/types-and-traits.rst:116
msgid ":dp:`fls_bw8zutjcteki` :t:`Raw pointer type`"
msgstr ""

#: ../../src/types-and-traits.rst:119
msgid ":dp:`fls_nqezuc9u6wpn` :t:`Reference type`"
msgstr ""

#: ../../src/types-and-traits.rst:122
msgid ":dp:`fls_lh52q6f6snfh` :t:`[Trait type]s`"
msgstr ""

#: ../../src/types-and-traits.rst:125
msgid ":dp:`fls_qqg0uixrd1a4` :t:`Impl trait type`"
msgstr ""

#: ../../src/types-and-traits.rst:128
msgid ":dp:`fls_b8ecqp2argmn` :t:`Trait object type`"
msgstr ""

#: ../../src/types-and-traits.rst:131
msgid ":dp:`fls_m5vtcars8aga` Other :t:`[type]s`"
msgstr ""

#: ../../src/types-and-traits.rst:134
msgid ":dp:`fls_lw38557rqikt` :t:`Inferred type`"
msgstr ""

#: ../../src/types-and-traits.rst:137
msgid ":dp:`fls_jxn63ow9xby3` :t:`Never type`"
msgstr ""

#: ../../src/types-and-traits.rst:140
msgid ":dp:`fls_a81tweobvm0p` :t:`Parenthesized type`"
msgstr ""

#: ../../src/types-and-traits.rst:146
msgid "Scalar Types"
msgstr ""

#: ../../src/types-and-traits.rst:151
msgid "Bool Type"
msgstr ""

#: ../../src/types-and-traits.rst:155
msgid ""
":dp:`fls_h5994su1yft3` :t:`Bool` is a :t:`type` whose :t:`[value]s` "
"denote the truth :t:`[value]s` of logic and Boolean algebra."
msgstr ""

#: ../../src/types-and-traits.rst:159
msgid ""
":dp:`fls_v8atmrwz6wzk` :t:`Type` :c:`bool` appears in the :t:`language "
"prelude` under the name ``bool``."
msgstr ""

#: ../../src/types-and-traits.rst:163
msgid ""
":dp:`fls_iye7ho2ynyhn` Boolean :t:`value` ``false`` has bit pattern "
"``0x00``. Boolean :t:`value` ``true`` has bit pattern ``0x01``."
msgstr ""

#: ../../src/types-and-traits.rst:167
msgid ""
":dp:`fls_7nd5tixyqir8` The following operations are defined on :t:`type` "
":c:`bool`:"
msgstr ""

#: ../../src/types-and-traits.rst:170
msgid ":dp:`fls_w2dzqq54fjhb` **Logical not**"
msgstr ""

#: ../../src/types-and-traits.rst:175
msgid ":dp:`fls_ufmd38hi9t9y`"
msgstr ""

#: ../../src/types-and-traits.rst:176 ../../src/types-and-traits.rst:191
#: ../../src/types-and-traits.rst:217 ../../src/types-and-traits.rst:243
#: ../../src/types-and-traits.rst:269 ../../src/types-and-traits.rst:295
msgid "**a**"
msgstr ""

#: ../../src/types-and-traits.rst:177
msgid "**!a**"
msgstr ""

#: ../../src/types-and-traits.rst:178
msgid ":dp:`fls_5allcjkjnon2`"
msgstr ""

#: ../../src/types-and-traits.rst:179 ../../src/types-and-traits.rst:183
#: ../../src/types-and-traits.rst:195 ../../src/types-and-traits.rst:196
#: ../../src/types-and-traits.rst:197 ../../src/types-and-traits.rst:199
#: ../../src/types-and-traits.rst:204 ../../src/types-and-traits.rst:221
#: ../../src/types-and-traits.rst:222 ../../src/types-and-traits.rst:223
#: ../../src/types-and-traits.rst:225 ../../src/types-and-traits.rst:227
#: ../../src/types-and-traits.rst:230 ../../src/types-and-traits.rst:231
#: ../../src/types-and-traits.rst:247 ../../src/types-and-traits.rst:248
#: ../../src/types-and-traits.rst:251 ../../src/types-and-traits.rst:253
#: ../../src/types-and-traits.rst:256 ../../src/types-and-traits.rst:257
#: ../../src/types-and-traits.rst:273 ../../src/types-and-traits.rst:274
#: ../../src/types-and-traits.rst:275 ../../src/types-and-traits.rst:277
#: ../../src/types-and-traits.rst:282 ../../src/types-and-traits.rst:287
#: ../../src/types-and-traits.rst:299 ../../src/types-and-traits.rst:300
#: ../../src/types-and-traits.rst:303 ../../src/types-and-traits.rst:305
#: ../../src/types-and-traits.rst:308
msgid "``true``"
msgstr ""

#: ../../src/types-and-traits.rst:180 ../../src/types-and-traits.rst:182
#: ../../src/types-and-traits.rst:200 ../../src/types-and-traits.rst:201
#: ../../src/types-and-traits.rst:203 ../../src/types-and-traits.rst:205
#: ../../src/types-and-traits.rst:207 ../../src/types-and-traits.rst:208
#: ../../src/types-and-traits.rst:209 ../../src/types-and-traits.rst:226
#: ../../src/types-and-traits.rst:229 ../../src/types-and-traits.rst:233
#: ../../src/types-and-traits.rst:234 ../../src/types-and-traits.rst:235
#: ../../src/types-and-traits.rst:249 ../../src/types-and-traits.rst:252
#: ../../src/types-and-traits.rst:255 ../../src/types-and-traits.rst:259
#: ../../src/types-and-traits.rst:260 ../../src/types-and-traits.rst:261
#: ../../src/types-and-traits.rst:278 ../../src/types-and-traits.rst:279
#: ../../src/types-and-traits.rst:281 ../../src/types-and-traits.rst:283
#: ../../src/types-and-traits.rst:285 ../../src/types-and-traits.rst:286
#: ../../src/types-and-traits.rst:301 ../../src/types-and-traits.rst:304
#: ../../src/types-and-traits.rst:307 ../../src/types-and-traits.rst:309
#: ../../src/types-and-traits.rst:311 ../../src/types-and-traits.rst:312
#: ../../src/types-and-traits.rst:313
msgid "``false``"
msgstr ""

#: ../../src/types-and-traits.rst:181
msgid ":dp:`fls_3bibysz95ktn`"
msgstr ""

#: ../../src/types-and-traits.rst:185
msgid ":dp:`fls_fxq19dqtmifj` **Logical and**"
msgstr ""

#: ../../src/types-and-traits.rst:190
msgid ":dp:`fls_drhpcwoblcux`"
msgstr ""

#: ../../src/types-and-traits.rst:192 ../../src/types-and-traits.rst:218
#: ../../src/types-and-traits.rst:244 ../../src/types-and-traits.rst:270
#: ../../src/types-and-traits.rst:296
msgid "**b**"
msgstr ""

#: ../../src/types-and-traits.rst:193
msgid "**a & b**"
msgstr ""

#: ../../src/types-and-traits.rst:194
msgid ":dp:`fls_v86qrsqcs3nd`"
msgstr ""

#: ../../src/types-and-traits.rst:198
msgid ":dp:`fls_dd49lb2k3erc`"
msgstr ""

#: ../../src/types-and-traits.rst:202
msgid ":dp:`fls_t6ef5x4x5poi`"
msgstr ""

#: ../../src/types-and-traits.rst:206
msgid ":dp:`fls_kqtgjgn1hqrj`"
msgstr ""

#: ../../src/types-and-traits.rst:211
msgid ":dp:`fls_ws15ilzf8n6z` **Logical or**"
msgstr ""

#: ../../src/types-and-traits.rst:216
msgid ":dp:`fls_ni4mgq3mouek`"
msgstr ""

#: ../../src/types-and-traits.rst:219
msgid "**a | b**"
msgstr ""

#: ../../src/types-and-traits.rst:220
msgid ":dp:`fls_6c9ax4qsr1gy`"
msgstr ""

#: ../../src/types-and-traits.rst:224
msgid ":dp:`fls_sqcgvpr4egtx`"
msgstr ""

#: ../../src/types-and-traits.rst:228
msgid ":dp:`fls_9ys0itbp4okd`"
msgstr ""

#: ../../src/types-and-traits.rst:232
msgid ":dp:`fls_b46gbyid15zx`"
msgstr ""

#: ../../src/types-and-traits.rst:237
msgid ":dp:`fls_f8ag276ecbze` **Logical exclusive or (xor)**"
msgstr ""

#: ../../src/types-and-traits.rst:242
msgid ":dp:`fls_twwjcrcfirdi`"
msgstr ""

#: ../../src/types-and-traits.rst:245
msgid "**a ^ b**"
msgstr ""

#: ../../src/types-and-traits.rst:246
msgid ":dp:`fls_wovu7330vdrq`"
msgstr ""

#: ../../src/types-and-traits.rst:250
msgid ":dp:`fls_7xopdco6iy74`"
msgstr ""

#: ../../src/types-and-traits.rst:254
msgid ":dp:`fls_nb5cb6en2p5w`"
msgstr ""

#: ../../src/types-and-traits.rst:258
msgid ":dp:`fls_gd28wfcfs2pv`"
msgstr ""

#: ../../src/types-and-traits.rst:263
msgid ":dp:`fls_67a7p57nzbul` **Equality**"
msgstr ""

#: ../../src/types-and-traits.rst:268
msgid ":dp:`fls_cq0qunw51m94`"
msgstr ""

#: ../../src/types-and-traits.rst:271
msgid "**a == b**"
msgstr ""

#: ../../src/types-and-traits.rst:272
msgid ":dp:`fls_o1e4tnh7v3db`"
msgstr ""

#: ../../src/types-and-traits.rst:276
msgid ":dp:`fls_6vnv3ygisjr`"
msgstr ""

#: ../../src/types-and-traits.rst:280
msgid ":dp:`fls_s6m9abmmtc9i`"
msgstr ""

#: ../../src/types-and-traits.rst:284
msgid ":dp:`fls_s19vu65z96y5`"
msgstr ""

#: ../../src/types-and-traits.rst:289
msgid ":dp:`fls_2d4aqspw0wlt` **Greater than**"
msgstr ""

#: ../../src/types-and-traits.rst:294
msgid ":dp:`fls_msjo2zd67zn1`"
msgstr ""

#: ../../src/types-and-traits.rst:297
msgid "**a > b**"
msgstr ""

#: ../../src/types-and-traits.rst:298
msgid ":dp:`fls_w1oti03tm1y6`"
msgstr ""

#: ../../src/types-and-traits.rst:302
msgid ":dp:`fls_9gqd7eevbknt`"
msgstr ""

#: ../../src/types-and-traits.rst:306
msgid ":dp:`fls_r4o2rmhqg4br`"
msgstr ""

#: ../../src/types-and-traits.rst:310
msgid ":dp:`fls_1n7p6ij1dpm`"
msgstr ""

#: ../../src/types-and-traits.rst:315
msgid ":dp:`fls_4x27kfiodb8` Operation ``a != b`` is equivalent to ``!(a == b)``."
msgstr ""

#: ../../src/types-and-traits.rst:318
msgid ""
":dp:`fls_me6bf9m2ypt` Operation ``a >= b`` is equivalent to ``a == b | a "
"> b``."
msgstr ""

#: ../../src/types-and-traits.rst:321
msgid ":dp:`fls_2j659ns8wop4` Operation ``a < b`` is equivalent to ``!(a >= b)``."
msgstr ""

#: ../../src/types-and-traits.rst:324
msgid ""
":dp:`fls_d09l2rl0161l` Operation ``a <= b`` shall be equivalent to ``a =="
" b | a < b``."
msgstr ""

#: ../../src/types-and-traits.rst:328 ../../src/types-and-traits.rst:346
#: ../../src/types-and-traits.rst:542 ../../src/types-and-traits.rst:678
#: ../../src/types-and-traits.rst:955 ../../src/types-and-traits.rst:1035
#: ../../src/types-and-traits.rst:1184
msgid "Undefined Behavior"
msgstr ""

#: ../../src/types-and-traits.rst:329
msgid ""
":dp:`fls_2sd39mj05mb9` It is undefined behavior for a :t:`value` of "
":t:`type` :c:`bool` to have a bit pattern other than ``0x00`` and "
"``0x01``."
msgstr ""

#: ../../src/types-and-traits.rst:336
msgid "Char Type"
msgstr ""

#: ../../src/types-and-traits.rst:340
msgid ""
":dp:`fls_vnwbs0exbwcn` :c:`Char` is a :t:`type` whose :t:`[value]s` are "
"represented as a 32-bit unsigned word in the 0x000 to 0xD7FF or the "
"0xE000 to 0x10FFFF inclusive ranges of :t:`Unicode`."
msgstr ""

#: ../../src/types-and-traits.rst:347
msgid ""
":dp:`fls_juysxea25owj` It is undefined behavior for a :t:`value` of "
":t:`type` :c:`char` to be outside the 0x000 to 0xD7FF or the 0xE000 to "
"0x10FFFF inclusive ranges of :t:`Unicode`."
msgstr ""

#: ../../src/types-and-traits.rst:354
msgid "Numeric Types"
msgstr ""

#: ../../src/types-and-traits.rst:359
msgid "Floating Point Types"
msgstr ""

#: ../../src/types-and-traits.rst:363
msgid ""
":dp:`fls_30yny2xb9b6b` :t:`Type` :c:`f32` is equivalent to the IEEE "
"754-2008 binary32 :t:`type`."
msgstr ""

#: ../../src/types-and-traits.rst:366
msgid ""
":dp:`fls_yqflrq9s6p6n` :t:`Type` :c:`f64` is equivalent to the IEEE "
"754-2008 binary64 :t:`type`."
msgstr ""

#: ../../src/types-and-traits.rst:372
msgid "Integer Types"
msgstr ""

#: ../../src/types-and-traits.rst:376
msgid ""
":dp:`fls_cokwseo3nnr` :t:`[Unsigned integer type]s` define the following "
"inclusive ranges over the domain of whole numbers:"
msgstr ""

#: ../../src/types-and-traits.rst:382
msgid ":dp:`fls_vk1skn6ek36u`"
msgstr ""

#: ../../src/types-and-traits.rst:383 ../../src/types-and-traits.rst:418
#: ../../src/types-and-traits.rst:1285 ../../src/types-and-traits.rst:2481
msgid "**Type**"
msgstr ""

#: ../../src/types-and-traits.rst:384 ../../src/types-and-traits.rst:419
msgid "**Minimum**"
msgstr ""

#: ../../src/types-and-traits.rst:385 ../../src/types-and-traits.rst:420
msgid "**Maximum**"
msgstr ""

#: ../../src/types-and-traits.rst:386
msgid ":dp:`fls_iikexw8ps6mk`"
msgstr ""

#: ../../src/types-and-traits.rst:387
msgid ":c:`u8`"
msgstr ""

#: ../../src/types-and-traits.rst:388 ../../src/types-and-traits.rst:392
#: ../../src/types-and-traits.rst:396 ../../src/types-and-traits.rst:400
#: ../../src/types-and-traits.rst:404
msgid "0"
msgstr ""

#: ../../src/types-and-traits.rst:389
msgid "2\\ :sup:`8` - 1"
msgstr ""

#: ../../src/types-and-traits.rst:390
msgid ":dp:`fls_cavasxxlgs7g`"
msgstr ""

#: ../../src/types-and-traits.rst:391
msgid ":c:`u16`"
msgstr ""

#: ../../src/types-and-traits.rst:393
msgid "2\\ :sup:`16` - 1"
msgstr ""

#: ../../src/types-and-traits.rst:394
msgid ":dp:`fls_7sx92xsjx3pl`"
msgstr ""

#: ../../src/types-and-traits.rst:395
msgid ":c:`u32`"
msgstr ""

#: ../../src/types-and-traits.rst:397
msgid "2\\ :sup:`32` - 1"
msgstr ""

#: ../../src/types-and-traits.rst:398
msgid ":dp:`fls_q9f95uet7gq4`"
msgstr ""

#: ../../src/types-and-traits.rst:399
msgid ":c:`u64`"
msgstr ""

#: ../../src/types-and-traits.rst:401
msgid "2\\ :sup:`64` - 1"
msgstr ""

#: ../../src/types-and-traits.rst:402
msgid ":dp:`fls_yjb3kzijd19v`"
msgstr ""

#: ../../src/types-and-traits.rst:403
msgid ":c:`u128`"
msgstr ""

#: ../../src/types-and-traits.rst:405
msgid "2\\ :sup:`128` - 1"
msgstr ""

#: ../../src/types-and-traits.rst:407
msgid ""
":dp:`fls_75lntwhg20l` :t:`Type` :c:`usize` has the same number of bits as"
" the platform's :t:`pointer type`, and at least 16-bits wide."
msgstr ""

#: ../../src/types-and-traits.rst:411
msgid ""
":dp:`fls_p2shoji3xg5a` :t:`[Signed integer type]s` define the following "
"inclusive ranges over the domain of whole numbers:"
msgstr ""

#: ../../src/types-and-traits.rst:417
msgid ":dp:`fls_fsyt05u9y4sl`"
msgstr ""

#: ../../src/types-and-traits.rst:421
msgid ":dp:`fls_p9ffvtajr832`"
msgstr ""

#: ../../src/types-and-traits.rst:422
msgid ":c:`i8`"
msgstr ""

#: ../../src/types-and-traits.rst:423
msgid "\\- (2\\ :sup:`7`)"
msgstr ""

#: ../../src/types-and-traits.rst:424
msgid "2\\ :sup:`7` - 1"
msgstr ""

#: ../../src/types-and-traits.rst:425
msgid ":dp:`fls_j6xan9f8udw7`"
msgstr ""

#: ../../src/types-and-traits.rst:426
msgid ":c:`i16`"
msgstr ""

#: ../../src/types-and-traits.rst:427
msgid "\\- (2\\ :sup:`15`)"
msgstr ""

#: ../../src/types-and-traits.rst:428
msgid "2\\ :sup:`15` - 1"
msgstr ""

#: ../../src/types-and-traits.rst:429
msgid ":dp:`fls_4t39p3ibkzu7`"
msgstr ""

#: ../../src/types-and-traits.rst:430
msgid ":c:`i32`"
msgstr ""

#: ../../src/types-and-traits.rst:431
msgid "\\- (2\\ :sup:`31`)"
msgstr ""

#: ../../src/types-and-traits.rst:432
msgid "2\\ :sup:`31` - 1"
msgstr ""

#: ../../src/types-and-traits.rst:433
msgid ":dp:`fls_egfoxke0lzje`"
msgstr ""

#: ../../src/types-and-traits.rst:434
msgid ":c:`i64`"
msgstr ""

#: ../../src/types-and-traits.rst:435
msgid "\\- (2\\ :sup:`63`)"
msgstr ""

#: ../../src/types-and-traits.rst:436
msgid "2\\ :sup:`63` - 1"
msgstr ""

#: ../../src/types-and-traits.rst:437
msgid ":dp:`fls_4c4qpel1tbqs`"
msgstr ""

#: ../../src/types-and-traits.rst:438
msgid ":c:`i128`"
msgstr ""

#: ../../src/types-and-traits.rst:439
msgid "\\- (2\\ :sup:`127`)"
msgstr ""

#: ../../src/types-and-traits.rst:440
msgid "2\\ :sup:`127` - 1"
msgstr ""

#: ../../src/types-and-traits.rst:442
msgid ""
":dp:`fls_t9oyfmgqka6u` :t:`Type` :c:`isize` has the same number of bits "
"as the platform's :t:`pointer type`, and at least 16-bits wide."
msgstr ""

#: ../../src/types-and-traits.rst:449
msgid "Sequence Types"
msgstr ""

#: ../../src/types-and-traits.rst:454
msgid "Array Type"
msgstr ""

#: ../../src/types-and-traits.rst:468
msgid ""
":dp:`fls_fx7b3qv3ghca` An :t:`array type` is a :t:`sequence type` that "
"represents a fixed sequence of elements."
msgstr ""

#: ../../src/types-and-traits.rst:472
msgid ""
":dp:`fls_pkts1p2dnxo` The :t:`element type` shall be a :t:`fixed sized "
"type`."
msgstr ""

#: ../../src/types-and-traits.rst:475
msgid ""
":dp:`fls_imr2jx6cbuzq` The :t:`size operand` shall be a :t:`constant "
"expression`."
msgstr ""

#: ../../src/types-and-traits.rst:478
msgid ""
":dp:`fls_r8nqxry2dlww` The :t:`type` of the :t:`size operand` is "
":t:`type` :c:`usize`."
msgstr ""

#: ../../src/types-and-traits.rst:482 ../../src/types-and-traits.rst:515
#: ../../src/types-and-traits.rst:576 ../../src/types-and-traits.rst:685
#: ../../src/types-and-traits.rst:760 ../../src/types-and-traits.rst:799
#: ../../src/types-and-traits.rst:961 ../../src/types-and-traits.rst:992
#: ../../src/types-and-traits.rst:1040 ../../src/types-and-traits.rst:1077
#: ../../src/types-and-traits.rst:1120 ../../src/types-and-traits.rst:1157
#: ../../src/types-and-traits.rst:1189 ../../src/types-and-traits.rst:1213
#: ../../src/types-and-traits.rst:1247 ../../src/types-and-traits.rst:1585
#: ../../src/types-and-traits.rst:2259 ../../src/types-and-traits.rst:2400
#: ../../src/types-and-traits.rst:2432 ../../src/types-and-traits.rst:2638
msgid "Examples"
msgstr ""

#: ../../src/types-and-traits.rst:483
msgid ":dp:`fls_9vjijqi9w8wn` An array type in the context of a let statement:"
msgstr ""

#: ../../src/types-and-traits.rst:493
msgid "Slice Type"
msgstr ""

#: ../../src/types-and-traits.rst:504
msgid ""
":dp:`fls_ftvua2hlvr08` A :t:`slice type` is a :t:`sequence type` that "
"provides a view into a sequence of elements."
msgstr ""

#: ../../src/types-and-traits.rst:508
msgid ""
":dp:`fls_acgtczhk8ci0` The :t:`element type` shall be a :t:`fixed sized "
"type`."
msgstr ""

#: ../../src/types-and-traits.rst:511
msgid ":dp:`fls_5gl67ftc3m21` A :t:`slice type` is a :t:`dynamically sized type`."
msgstr ""

#: ../../src/types-and-traits.rst:516
msgid ""
":dp:`fls_nsny832ap4v1` See :p:`4.3.1. <fls_eyrdzuv0r9l4>` for the "
"declaration of ``array``."
msgstr ""

#: ../../src/types-and-traits.rst:526
msgid "Str Type"
msgstr ""

#: ../../src/types-and-traits.rst:530
msgid ""
":dp:`fls_wlnoq1qoq2kr` :c:`Str` is a :t:`sequence type` that represents a"
" :t:`slice` of 8-bit unsigned bytes."
msgstr ""

#: ../../src/types-and-traits.rst:534
msgid ""
":dp:`fls_1xa6fas6laha` :t:`Type` :c:`str` is a :t:`dynamically sized "
"type`."
msgstr ""

#: ../../src/types-and-traits.rst:537
msgid ""
":dp:`fls_yu7r2077n9m7` A :t:`value` of :t:`type` :c:`str` shall denote a "
"valid UTF-8 sequence of characters."
msgstr ""

#: ../../src/types-and-traits.rst:543
msgid ""
":dp:`fls_wacoqrtzvrwu` It is undefined behavior for a :t:`value` of "
":t:`type` :c:`str` to denote an invalid UTF-8 sequence of characters."
msgstr ""

#: ../../src/types-and-traits.rst:550
msgid "Tuple Type"
msgstr ""

#: ../../src/types-and-traits.rst:566
msgid ""
":dp:`fls_bn7wmf681ngt` A :t:`tuple type` is a :t:`sequence type` that "
"represents a heterogeneous list of other :t:`[type]s`."
msgstr ""

#: ../../src/types-and-traits.rst:570
msgid ""
":dp:`fls_s9a36zsrfqew` If the :t:`type` of a :t:`tuple field` is a :t"
":`dynamically-sized type`, then the :t:`tuple field` shall be the last "
":t:`tuple field` in the :s:`TupleFieldList`."
msgstr ""

#: ../../src/types-and-traits.rst:586
msgid "Abstract Data Types"
msgstr ""

#: ../../src/types-and-traits.rst:591
msgid "Enum Type"
msgstr ""

#: ../../src/types-and-traits.rst:622
msgid ""
":dp:`fls_gbdd37seqoab` An :t:`enum type` is an :t:`abstract data type` "
"that contains :t:`[enum variant]s`. An :t:`enum variant` specifies a "
":t:`value` of an :t:`enum type`."
msgstr ""

#: ../../src/types-and-traits.rst:626
msgid ":dp:`fls_il9a1olqmu38` A :t:`zero-variant enum type` has no :t:`[value]s`."
msgstr ""

#: ../../src/types-and-traits.rst:629
msgid ""
":dp:`fls_g5qle7xzaoif` The :t:`name` of an :t:`enum variant` shall denote"
" a unique :t:`name` within the related :s:`EnumDeclaration`."
msgstr ""

#: ../../src/types-and-traits.rst:633
msgid ""
":dp:`fls_hp5frc752dam` A :t:`discriminant initializer` shall be specified"
" only when all :t:`[enum variant]s` appear without an "
":s:`EnumVariantKind`."
msgstr ""

#: ../../src/types-and-traits.rst:637
msgid ""
":dp:`fls_pijczoq4k9ij` The :t:`type` of the :t:`expression` of a "
":t:`discriminant initializer` shall be either:"
msgstr ""

#: ../../src/types-and-traits.rst:641
msgid ""
":dp:`fls_x7nh42on06bg` The :t:`type` of the :t:`primitive representation`"
" specified by :t:`attribute` :c:`repr`, or"
msgstr ""

#: ../../src/types-and-traits.rst:645
msgid ":dp:`fls_duqbzvpuehvv` :t:`Type` :c:`isize`."
msgstr ""

#: ../../src/types-and-traits.rst:648
msgid ""
":dp:`fls_ly183pj4fkgh` The :t:`value` of the :t:`expression` of a "
":t:`discriminant initializer` shall be a :t:`constant expression`."
msgstr ""

#: ../../src/types-and-traits.rst:652
msgid ""
":dp:`fls_w7sggezgq9o4` The :t:`value` of a :t:`discriminant` of an "
":t:`enum variant` is determined as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:656
msgid ""
":dp:`fls_93l5o6qar5p2` If the :t:`enum variant` contains a "
":t:`discriminant initializer`, then the :t:`value` is the value of its "
":t:`expression`."
msgstr ""

#: ../../src/types-and-traits.rst:660
msgid ""
":dp:`fls_t36rk3wikq28` Else, if the :t:`enum variant` is the first "
":t:`enum variant` in the :s:`EnumVariantList`, then the :t:`value` is "
"zero."
msgstr ""

#: ../../src/types-and-traits.rst:664
msgid ""
":dp:`fls_8ajw5trd23wi` Otherwise the :t:`value` is one greater than the "
":t:`value` of the :t:`discriminant` of the previous :t:`enum variant`."
msgstr ""

#: ../../src/types-and-traits.rst:668
msgid ""
":dp:`fls_w9xj26ej869w` It is a static error if two :t:`[enum variant]s` "
"have the same :t:`[discriminant]s` with the same :t:`value`."
msgstr ""

#: ../../src/types-and-traits.rst:672
msgid ""
":dp:`fls_wqbuof7kxsrg` It is a static error if the :t:`value` of a "
":t:`discriminant` exceeds the maximum :t:`value` of the :t:`type` of the "
":t:`expression` of a :t:`discriminant initializer`."
msgstr ""

#: ../../src/types-and-traits.rst:679
msgid ""
":dp:`fls_f046du2fkgr6` It is undefined behavior for a :t:`value` of an "
":t:`enum type` to have a :t:`discriminant` other than a :t:`discriminant`"
" specified by the :t:`enum type`."
msgstr ""

#: ../../src/types-and-traits.rst:708
msgid "Struct Type"
msgstr ""

#: ../../src/types-and-traits.rst:741
msgid ""
":dp:`fls_g1azfj548136` A :t:`struct type` is an :t:`abstract data type` "
"that is a product of other :t:`[type]s`."
msgstr ""

#: ../../src/types-and-traits.rst:745
msgid ""
":dp:`fls_r885av95eivp` The :t:`name` of a :t:`record struct field` shall "
"denote a unique :t:`name` within the :s:`RecordStructDeclaration`."
msgstr ""

#: ../../src/types-and-traits.rst:749
msgid ""
":dp:`fls_auurdv1zvzb` If the :t:`type` of a :t:`record struct field` is a"
" :t:`dynamically sized type`, then :t:`the record struct field` shall be "
"the last :t:`record struct field` in the :s:`RecordStructFieldList`."
msgstr ""

#: ../../src/types-and-traits.rst:754
msgid ""
":dp:`fls_vce7w0904du5` If the :t:`type` of a :t:`tuple struct field` is a"
" :t:`dynamically sized type`, then the :t:`tuple struct field` shall be "
"the last :t:`record tuple field` in the :s:`TupleStructFieldList`."
msgstr ""

#: ../../src/types-and-traits.rst:780
msgid "Union Type"
msgstr ""

#: ../../src/types-and-traits.rst:791
msgid ""
":dp:`fls_nskmnzq95yqm` A :t:`union type` is an :t:`abstract data type` "
"similar to a C-like union."
msgstr ""

#: ../../src/types-and-traits.rst:794
msgid ""
":dp:`fls_1caus8ybmfli` The :t:`name` of a :t:`union field` shall denote a"
" unique :t:`name` within the related :s:`RecordStructDeclaration`."
msgstr ""

#: ../../src/types-and-traits.rst:811
msgid "Function Types"
msgstr ""

#: ../../src/types-and-traits.rst:816
msgid "Closure Type"
msgstr ""

#: ../../src/types-and-traits.rst:820
msgid ""
":dp:`fls_bsykgnbatpmi` A :t:`closure type` is a unique anonymous "
":t:`function type` that encapsulates all :t:`[captured variable]s` of a "
":t:`closure expression`."
msgstr ""

#: ../../src/types-and-traits.rst:824
msgid ""
":dp:`fls_zfj4l8bigdg0` A :t:`closure type` implements the "
":std:`core::ops::FnOnce` :t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:827
msgid ""
":dp:`fls_bn0ueivujnqk` A :t:`closure type` that does not move out its "
":t:`[captured variable]s` implements the :std:`core::ops::FnMut` "
":t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:831
msgid ""
":dp:`fls_u01kt5glbuz8` A :t:`closure type` that does not move or mutate "
"its :t:`[captured variable]s` implements the :std:`core::ops::Fn` "
":t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:835
msgid ""
":dp:`fls_3jeootwe6ucu` A :t:`closure type` that does not encapsulate "
":t:`[captured variable]s` is :t:`coercible` to a :t:`function pointer "
"type`."
msgstr ""

#: ../../src/types-and-traits.rst:839
msgid ""
":dp:`fls_63jqtyw0rz8c` A :t:`closure type` implicitly implements the "
":std:`core::marker::Copy` :t:`trait` if"
msgstr ""

#: ../../src/types-and-traits.rst:843
msgid ""
":dp:`fls_az5hkn72e3fz` It does not encapsulate :t:`[captured variable]s` "
":t:`by unique immutable borrow` or :t:`by mutable reference`, or"
msgstr ""

#: ../../src/types-and-traits.rst:847
msgid ""
":dp:`fls_vvc8c910dmeh` The :t:`[type]s` of all :t:`[captured variable]s` "
"implement the :std:`core::marker::Copy` :t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:851
msgid ""
":dp:`fls_3c4g9njja5s5` A :t:`closure type` implicitly implements the "
":std:`core::marker::Clone` :t:`trait` if"
msgstr ""

#: ../../src/types-and-traits.rst:855
msgid ""
":dp:`fls_yr55fbspw7s9` It does not encapsulate :t:`[captured variable]s` "
":t:`by unique immutable borrow` or :t:`by mutable reference`, or"
msgstr ""

#: ../../src/types-and-traits.rst:859
msgid ""
":dp:`fls_pt65037r6hjr` The :t:`[type]s` of all :t:`[captured variable]s` "
"implement the :std:`core::marker::Clone` :t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:863
msgid ""
":dp:`fls_2nuhy0ujgq18` A :t:`closure type` implicitly implements the "
":std:`core::marker::Send` :t:`trait` if:"
msgstr ""

#: ../../src/types-and-traits.rst:867
msgid ""
":dp:`fls_vamgwed199ct` The :t:`[type]s` of all :t:`[captured variable]s` "
"that employ :t:`by immutable borrow`, :t:`by mutable borrow`, or :t:`by "
"move` :t:`capture mode` implement the :std:`core::marker::Sync` "
":t:`trait`, and"
msgstr ""

#: ../../src/types-and-traits.rst:872
msgid ""
":dp:`fls_f96a5r1v7te7` The :t:`[type]s` of all :t:`[captured variable]s` "
"that employ :t:`by unique immutable borrow`, :t:`by mutable reference`, "
":t:`by copy`, or :t:`by move` :t:`capture mode` implement the "
":std:`core::marker::Send` :t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:877
msgid ""
":dp:`fls_5jh07heok8sy` A :t:`closure type` implicitly implements the "
":std:`core::marker::Sync` :t:`trait` if the :t:`[type]s` of all "
":t:`[captured variable]s` implement the :std:`core::marker::Sync` "
":t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:885
msgid "Function Item Type"
msgstr ""

#: ../../src/types-and-traits.rst:889
msgid ""
":dp:`fls_t24iojx7yc23` A :t:`function item type` is a unique anonymous "
":t:`function type` that identifies a :t:`function`."
msgstr ""

#: ../../src/types-and-traits.rst:893
msgid ""
":dp:`fls_sas3ahcshnrh` An :t:`external function item type` is a "
":t:`function item type` where the related :t:`function` is an "
":t:`external function`."
msgstr ""

#: ../../src/types-and-traits.rst:897
msgid ""
":dp:`fls_liwnzwu1el1i` An :t:`unsafe function item type` is a "
":t:`function item type` where the related :t:`function` is an :t:`unsafe "
"function`."
msgstr ""

#: ../../src/types-and-traits.rst:901
msgid ""
":dp:`fls_e9x4f7qxvvjv` A :t:`function item type` is :t:`coercible` to a "
":t:`function pointer type`."
msgstr ""

#: ../../src/types-and-traits.rst:904
msgid ""
":dp:`fls_1941wid94hlg` A :t:`function item type` implements the "
":std:`core::ops::Fn` :t:`trait`, the :std:`core::ops::FnMut` :t:`trait`, "
"the :std:`core::ops::FnOnce` :t:`trait`, the :std:`core::marker::Copy` "
":t:`trait`, the :std:`core::marker::Clone` :t:`trait`, the "
":std:`core::marker::Send` :t:`trait`, and the :std:`core::marker::Sync` "
":t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:914
msgid "Indirection Types"
msgstr ""

#: ../../src/types-and-traits.rst:919
msgid "Function Pointer Type"
msgstr ""

#: ../../src/types-and-traits.rst:942
msgid ""
":dp:`fls_v2wrytr3t04h` A :t:`function pointer type` is an :t:`indirection"
" type` that refers to a :t:`function`."
msgstr ""

#: ../../src/types-and-traits.rst:946
msgid ""
":dp:`fls_5dd7icjcl3nt` An :t:`unsafe function pointer type` is a function"
" pointer type subject to :t:`keyword` ``unsafe``."
msgstr ""

#: ../../src/types-and-traits.rst:950
msgid ""
":dp:`fls_hbn1l42xmr3h` A :s:`VariadicPart` shall be specified only when "
"the :t:`ABI` of the :t:`function pointer type` is either ``extern \"C\"``"
" or ``extern \"cdecl\"``."
msgstr ""

#: ../../src/types-and-traits.rst:956
msgid ""
":dp:`fls_52thmi9hnoks` It is undefined behavior to have a :t:`value` of a"
" :t:`function pointer type` that is :c:`null`."
msgstr ""

#: ../../src/types-and-traits.rst:969
msgid "Raw Pointer Type"
msgstr ""

#: ../../src/types-and-traits.rst:980
msgid ""
":dp:`fls_rpbhr0xukbx9` A :t:`raw pointer type` is an :t:`indirection "
"type` without validity guarantees."
msgstr ""

#: ../../src/types-and-traits.rst:983
msgid ""
":dp:`fls_hrum767l6dte` Comparing two :t:`[value]s` of :t:`[raw pointer "
"type]s` compares the addresses of the :t:`[value]s`."
msgstr ""

#: ../../src/types-and-traits.rst:987
msgid ""
":dp:`fls_k6ues2936pjq` Comparing a :t:`value` of a :t:`raw pointer type` "
"to a :t:`value` of a :t:`dynamically sized type` compares the data being "
"pointed to."
msgstr ""

#: ../../src/types-and-traits.rst:1001
msgid "Reference Type"
msgstr ""

#: ../../src/types-and-traits.rst:1012
msgid ""
":dp:`fls_twhq24s8kchh` A :t:`reference type` is an :t:`indirection type` "
"with :t:`ownership`."
msgstr ""

#: ../../src/types-and-traits.rst:1015
msgid ""
":dp:`fls_ie0avzljmxfm` A :t:`shared reference type` prevents the direct "
"mutation of a referenced :t:`value`."
msgstr ""

#: ../../src/types-and-traits.rst:1019
msgid ""
":dp:`fls_15zdiqsm1q3p` A :t:`shared reference type` implements the "
":std:`core::marker::Copy` :t:`trait`. Copying a :t:`shared reference` "
"performs a shallow copy."
msgstr ""

#: ../../src/types-and-traits.rst:1023
msgid ""
":dp:`fls_csdjfwczlzfd` Releasing a :t:`shared reference` has no effect on"
" the :t:`value` it refers to."
msgstr ""

#: ../../src/types-and-traits.rst:1026
msgid ""
":dp:`fls_vaas9kns4zo6` A :t:`mutable reference type` allows the direct "
"mutation of a referenced :t:`value`."
msgstr ""

#: ../../src/types-and-traits.rst:1030
msgid ""
":dp:`fls_n6ffcms5pr0r` A :t:`mutable reference type` does not implement "
"the :c:`copy::marker::Copy` :t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:1036
msgid ""
":dp:`fls_ezh8aq6fmdvz` It is undefined behavior if a :t:`value` of a "
":t:`reference type` is :c:`null`."
msgstr ""

#: ../../src/types-and-traits.rst:1049
msgid "Trait Types"
msgstr ""

#: ../../src/types-and-traits.rst:1054
msgid "Impl Trait Type"
msgstr ""

#: ../../src/types-and-traits.rst:1068
msgid ""
":dp:`fls_a6zlvyxpgsew` An :t:`impl trait type` is a :t:`type` that "
"implements a :t:`trait`, where the :t:`type` is known at compile time."
msgstr ""

#: ../../src/types-and-traits.rst:1072
msgid ""
":dp:`fls_ieyqx5vzas2m` An :t:`impl trait type` shall appear only within a"
" :t:`function parameter` or the :t:`return type` of a :t:`function`."
msgstr ""

#: ../../src/types-and-traits.rst:1088
msgid "Trait Object Type"
msgstr ""

#: ../../src/types-and-traits.rst:1102
msgid ""
":dp:`fls_sgrvona1nb6h` A :t:`trait object type` is a :t:`type` that "
"implements a :t:`trait`, where the :t:`type` is not known at compile "
"time."
msgstr ""

#: ../../src/types-and-traits.rst:1106
msgid ""
":dp:`fls_9z8oleh0wdel` The first :t:`trait bound` of a :t:`trait object "
"type` shall denote an :t:`object safe trait`. Any subsequent :t:`[trait "
"bound]s` shall denote :t:`[auto trait]s`."
msgstr ""

#: ../../src/types-and-traits.rst:1111
msgid ""
":dp:`fls_s0oy2c8t4yz9` A :t:`trait object type` shall not contain :t"
":`[opt-out trait bound]s`."
msgstr ""

#: ../../src/types-and-traits.rst:1114
msgid ""
":dp:`fls_88b9bmhra55f` A :t:`trait object type` is a :t:`dynamically "
"sized type`. A :t:`trait object type` permits late binding of "
":t:`[method]s`. A :t:`method` invoked via a :t:`trait object type` "
"involves dynamic dispatching."
msgstr ""

#: ../../src/types-and-traits.rst:1130
msgid "Other Types"
msgstr ""

#: ../../src/types-and-traits.rst:1135
msgid "Inferred Type"
msgstr ""

#: ../../src/types-and-traits.rst:1146
msgid ""
":dp:`fls_xdtgr5toulpb` An :t:`inferred type` is a placeholder for a "
":t:`type` deduced by :t:`type inference`."
msgstr ""

#: ../../src/types-and-traits.rst:1150
msgid ""
":dp:`fls_3abhsuaa8nas` An :t:`inferred type` shall not appear within an "
":t:`item signature`."
msgstr ""

#: ../../src/types-and-traits.rst:1153
msgid ""
":dp:`fls_9d8wbugmar1m` An :t:`inferred type` forces a tool to :t:`infer` "
"a :t:`type`, if possible."
msgstr ""

#: ../../src/types-and-traits.rst:1165
msgid "Never Type"
msgstr ""

#: ../../src/types-and-traits.rst:1176
msgid ""
":dp:`fls_4u0v5uy95pyf` The :t:`never type` is a :t:`type` that represents"
" the result of a computation that never completes."
msgstr ""

#: ../../src/types-and-traits.rst:1180
msgid ":dp:`fls_xmtc10qzw0ui` The :t:`never type` has no :t:`[value]s`."
msgstr ""

#: ../../src/types-and-traits.rst:1185
msgid ""
":dp:`fls_22e8quna7ed5` It is undefined behavior to have a :t:`value` of "
"the :t:`never type`."
msgstr ""

#: ../../src/types-and-traits.rst:1197
msgid "Parenthesized Type"
msgstr ""

#: ../../src/types-and-traits.rst:1208
msgid ""
":dp:`fls_1dvo1epstrdv` A :t:`parenthesized type` is a :t:`type` that "
"disambiguates the interpretation of :t:`[lexical element]s`"
msgstr ""

#: ../../src/types-and-traits.rst:1221
msgid "Type Aliasing"
msgstr ""

#: ../../src/types-and-traits.rst:1235
msgid ""
":dp:`fls_bibigic4jjad` A :t:`type alias` is an :t:`item` that defines a "
":t:`name` for a :t:`type`."
msgstr ""

#: ../../src/types-and-traits.rst:1238
msgid ""
":dp:`fls_rosdkeck5ax2` A :t:`type alias` shall not have a "
":s:`TypeParameterBoundList` unless it is an :t:`associated item`."
msgstr ""

#: ../../src/types-and-traits.rst:1242
msgid ""
":dp:`fls_drxl7u3etfp9` The last :t:`where clause` is rejected, but may "
"still be consumed by :t:`[macro]s`."
msgstr ""

#: ../../src/types-and-traits.rst:1255
msgid "Representation"
msgstr ""

#: ../../src/types-and-traits.rst:1260
msgid "Type Layout"
msgstr ""

#: ../../src/types-and-traits.rst:1264
msgid ""
":dp:`fls_kdbq02iguzgl` All :t:`[value]s` have an :t:`alignment` and a "
":t:`size`."
msgstr ""

#: ../../src/types-and-traits.rst:1267
msgid ""
":dp:`fls_muxfn9soi47l` The :t:`alignment` of a :t:`value` specifies which"
" addresses are valid for storing the :t:`value`. :t:`Alignment` is "
"measured in bytes, is at least one, and always a power of two. A "
":t:`value` of :t:`alignment` ``N`` is stored at an address that is a "
"multiple of ``N``."
msgstr ""

#: ../../src/types-and-traits.rst:1273
msgid ""
":dp:`fls_1pbwigq6f3ha` The :t:`size` of a :t:`value` is the offset in "
"bytes between successive elements in :t:`array type` ``[T, N]`` where "
"``T`` is the :t:`type` of the :t:`value`, including any padding for "
":t:`alignment`. :t:`Size` is a multiple of the :t:`alignment`."
msgstr ""

#: ../../src/types-and-traits.rst:1279
msgid ":dp:`fls_bk3nm2n47afu` The :t:`size` of :t:`[scalar type]s` is as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:1284
msgid ":dp:`fls_z3i758jshvhx`"
msgstr ""

#: ../../src/types-and-traits.rst:1286
msgid "**Size**"
msgstr ""

#: ../../src/types-and-traits.rst:1287
msgid ":dp:`fls_uixe1ruv52be`"
msgstr ""

#: ../../src/types-and-traits.rst:1288
msgid ":c:`bool`"
msgstr ""

#: ../../src/types-and-traits.rst:1289 ../../src/types-and-traits.rst:1292
msgid "1"
msgstr ""

#: ../../src/types-and-traits.rst:1290
msgid ":dp:`fls_7at60xlxm9u4`"
msgstr ""

#: ../../src/types-and-traits.rst:1291
msgid ":c:`u8`, :c:`i8`"
msgstr ""

#: ../../src/types-and-traits.rst:1293
msgid ":dp:`fls_395247pkxv48`"
msgstr ""

#: ../../src/types-and-traits.rst:1294
msgid ":c:`u16`, :c:`i16`"
msgstr ""

#: ../../src/types-and-traits.rst:1295
msgid "2"
msgstr ""

#: ../../src/types-and-traits.rst:1296
msgid ":dp:`fls_tbe9sc75timc`"
msgstr ""

#: ../../src/types-and-traits.rst:1297
msgid ":c:`u32`, :c:`i32`"
msgstr ""

#: ../../src/types-and-traits.rst:1298 ../../src/types-and-traits.rst:1307
#: ../../src/types-and-traits.rst:1313
msgid "4"
msgstr ""

#: ../../src/types-and-traits.rst:1299
msgid ":dp:`fls_7jaqx33re3hg`"
msgstr ""

#: ../../src/types-and-traits.rst:1300
msgid ":c:`u64`, :c:`i64`"
msgstr ""

#: ../../src/types-and-traits.rst:1301 ../../src/types-and-traits.rst:1310
msgid "8"
msgstr ""

#: ../../src/types-and-traits.rst:1302
msgid ":dp:`fls_asys0iz6m0md`"
msgstr ""

#: ../../src/types-and-traits.rst:1303
msgid ":c:`u128`, :c:`i128`"
msgstr ""

#: ../../src/types-and-traits.rst:1304
msgid "16"
msgstr ""

#: ../../src/types-and-traits.rst:1305
msgid ":dp:`fls_wfv5vcxl2lc7`"
msgstr ""

#: ../../src/types-and-traits.rst:1306
msgid ":c:`f32`"
msgstr ""

#: ../../src/types-and-traits.rst:1308
msgid ":dp:`fls_x8dfw50z9c`"
msgstr ""

#: ../../src/types-and-traits.rst:1309
msgid ":c:`f64`"
msgstr ""

#: ../../src/types-and-traits.rst:1311
msgid ":dp:`fls_nyxnnlwmt5gu`"
msgstr ""

#: ../../src/types-and-traits.rst:1312
msgid ":c:`char`"
msgstr ""

#: ../../src/types-and-traits.rst:1315
msgid ""
":dp:`fls_lwmrljw9m0pb` Types :c:`usize` and :c:`isize` have :t:`size` big"
" enough to contain every address on the target platform."
msgstr ""

#: ../../src/types-and-traits.rst:1319
msgid ""
":dp:`fls_pzi6izljfv0f` For :t:`string type` :c:`str`, the :t:`layout` is "
"that of :t:`slice type` ``[u8]``."
msgstr ""

#: ../../src/types-and-traits.rst:1323
msgid ""
":dp:`fls_7cjbxleo998q` For :t:`array type` ``[T; N]`` where ``T`` is the "
":t:`element type` and ``N`` is :t:`size operand`, the :t:`alignment` is "
"that of ``T``, and the :t:`size` is calculated as "
"``core::mem::size_of::<T>() * N``."
msgstr ""

#: ../../src/types-and-traits.rst:1328
msgid ""
":dp:`fls_veotnstzigw2` For a :t:`slice type`, the :t:`layout` is that of "
"the :t:`array type` it slices."
msgstr ""

#: ../../src/types-and-traits.rst:1331
msgid ""
":dp:`fls_nmoqk7jo1kzf` For a :t:`tuple type`, the :t:`layout` is tool-"
"defined. For a :t:`unit tuple`, the :t:`size` is zero and the "
":t:`alignment` is one."
msgstr ""

#: ../../src/types-and-traits.rst:1335
msgid ""
":dp:`fls_gd7wozpn2ecp` For a :t:`closure type`, the :t:`layout` is tool-"
"defined."
msgstr ""

#: ../../src/types-and-traits.rst:1338
msgid ""
":dp:`fls_18ke90udyp67` For a :t:`thin pointer`, the :t:`size` and "
":t:`alignment` are those of :t:`type` :c:`usize`."
msgstr ""

#: ../../src/types-and-traits.rst:1342
msgid ""
":dp:`fls_e5hivr6m5s3h` For a :t:`fat pointer`, the :t:`size` and "
":t:`alignment` are tool-defined, but are at least those of a :t:`thin "
"pointer`."
msgstr ""

#: ../../src/types-and-traits.rst:1346
msgid ""
":dp:`fls_hlbsjggfxnt2` For a :t:`trait object type`, the :t:`layout` is "
"the same as the :t:`value` being :t:`coerced` into the :t:`trait object "
"type` at runtime."
msgstr ""

#: ../../src/types-and-traits.rst:1350
msgid ""
":dp:`fls_sdrb0k2r18my` For a :t:`struct type`, the memory layout is "
"undefined, unless the :t:`struct type` is subject to :t:`attribute` "
":c:`repr`."
msgstr ""

#: ../../src/types-and-traits.rst:1354
msgid ""
":dp:`fls_gt3tkbn4bsa6` For a :t:`union type`, the memory layout is "
"undefined, unless the :t:`union type` is subject to :t:`attribute` "
":c:`repr`. All :t:`[union field]s` share a common storage."
msgstr ""

#: ../../src/types-and-traits.rst:1359
msgid ""
":dp:`fls_njvdevz0xqc0` The :t:`size` of a :t:`recursive type` shall be "
"finite."
msgstr ""

#: ../../src/types-and-traits.rst:1365
msgid "Type Representation"
msgstr ""

#: ../../src/types-and-traits.rst:1369
msgid ""
":dp:`fls_mpqlyi3lgrfv` :t:`Type representation` specifies the :t:`layout`"
" of :t:`[field]s` of :t:`[abstract data type]s`. :t:`Type representation`"
" changes the bit padding between :t:`[field]s` of :t:`[abstract data "
"type]s` as well as their order, but does not change the :t:`layout` of "
"the :t:`[field]s` themselves."
msgstr ""

#: ../../src/types-and-traits.rst:1375
msgid ":dp:`fls_9dhnanv21y9z` :t:`Type representation` is classified into:"
msgstr ""

#: ../../src/types-and-traits.rst:1378
msgid ":dp:`fls_3dwtkr7vzha0` :t:`C representation`,"
msgstr ""

#: ../../src/types-and-traits.rst:1381
msgid ":dp:`fls_q465p1xuzxi` :t:`Default representation`,"
msgstr ""

#: ../../src/types-and-traits.rst:1384
msgid ":dp:`fls_hrsdn21jmgx2` :t:`Primitive representation`,"
msgstr ""

#: ../../src/types-and-traits.rst:1387
msgid ":dp:`fls_ergdb18tpx25` :t:`Transparent representation`."
msgstr ""

#: ../../src/types-and-traits.rst:1390
msgid ""
":dp:`fls_8s1vddh8vdhy` :t:`C representation` lays out a :t:`type` such "
"that the :t:`type` is interoperable with the C language."
msgstr ""

#: ../../src/types-and-traits.rst:1394
msgid ""
":dp:`fls_b005bktrkrxy` :t:`Default representation` makes no guarantees "
"about the :t:`layout`."
msgstr ""

#: ../../src/types-and-traits.rst:1397
msgid ""
":dp:`fls_7plbkqlmed0r` :t:`Primitive representation` is the :t:`type "
"representation` of individual :t:`[integer type]s`. :t:`Primitive "
"representation` applies only to an :t:`enum type` that is not a :t:`zero-"
"variant enum type`. It is possible to combine :t:`C representation` and "
":t:`primitive representation`."
msgstr ""

#: ../../src/types-and-traits.rst:1403
msgid ""
":dp:`fls_ml4khttq3w5k` :t:`Transparent representation` applies only to an"
" :t:`enum type` with a :t:`single variant` or a :t:`struct type` where "
"the :t:`struct type` has a single :t:`field` of non-zero :t:`size` and "
"any number of :t:`[field]s` of :t:`size` zero and :t:`alignment` one."
msgstr ""

#: ../../src/types-and-traits.rst:1409
msgid ""
":dp:`fls_9q2iqzbup8oy` :t:`[Type]s` subject to :t:`transparent "
"representation` have the same :t:`type representation` as a :t:`struct "
"type` with a single :t:`field` of a non-zero :t:`size`."
msgstr ""

#: ../../src/types-and-traits.rst:1414
msgid ""
":dp:`fls_fsbf6ist38ix` :t:`Type representation` may be specified using "
":t:`attribute` :c:`repr`. An :t:`enum type`, a :t:`struct type`, or a "
":t:`union type` that is not subject to :t:`attribute` :c:`repr` has "
":t:`default representation`."
msgstr ""

#: ../../src/types-and-traits.rst:1419
msgid ""
":dp:`fls_qkkc8x2oghst` :t:`Type representation` may be modified using "
":t:`attribute` :c:`[repr]'s` :c:`align` and :c:`packed` "
":t:`[representation modifier]s`. A :t:`representation modifier` shall "
"apply only to a :t:`struct type` or a :t:`union type` subject to :t:`C "
"representation` or :t:`default representation`."
msgstr ""

#: ../../src/types-and-traits.rst:1428
msgid "Enum Type Representation"
msgstr ""

#: ../../src/types-and-traits.rst:1432
msgid ""
":dp:`fls_p0c62ejo1u1t` :t:`[Zero-variant enum type]s` shall not be "
"subject to :t:`C representation`."
msgstr ""

#: ../../src/types-and-traits.rst:1435
msgid ""
":dp:`fls_efp1kfgkpba8` The :t:`size` and :t:`alignment` of an :t:`enum "
"type` without :t:`[field]s` subject to :t:`C representation`, :t:`default"
" representation`, or :t:`primitive representation` are those of its "
":t:`discriminant`."
msgstr ""

#: ../../src/types-and-traits.rst:1440
msgid ""
":dp:`fls_s9c0a0lg6c0p` The :t:`discriminant type` of an :t:`enum type` "
"with :t:`C representation` is the :t:`type` of a C ``enum`` for the "
"target platform's C :t:`ABI`."
msgstr ""

#: ../../src/types-and-traits.rst:1444
msgid ""
":dp:`fls_slhvf3gmqz4h` The :t:`discriminant type` of an :t:`enum type` "
"with :t:`default representation` is tool-defined."
msgstr ""

#: ../../src/types-and-traits.rst:1448
msgid ""
":dp:`fls_u1zy06510m56` The :t:`discriminant type` of an :t:`enum type` "
"with :t:`primitive representation` is the :t:`primitive type` specified "
"by the :t:`primitive representation`."
msgstr ""

#: ../../src/types-and-traits.rst:1453
msgid ""
":dp:`fls_ryvqkcx48u74` It is a static error if the :t:`discriminant type`"
" cannot hold all the :t:`discriminant` :t:`[value]s` of an :t:`enum "
"type`."
msgstr ""

#: ../../src/types-and-traits.rst:1457
msgid ""
":dp:`fls_zhle0rb0vhpc` An :t:`enum type` subject to :t:`transparent "
"representation` shall have a single :t:`variant` with"
msgstr ""

#: ../../src/types-and-traits.rst:1461
msgid ":dp:`fls_45f57s1gmmh5` a single :t:`field` of non-zero :t:`size`, or"
msgstr ""

#: ../../src/types-and-traits.rst:1464
msgid ""
":dp:`fls_hz012yus6b4g` any number of :t:`[field]s` of zero :t:`size` and "
":t:`alignment` one."
msgstr ""

#: ../../src/types-and-traits.rst:1467
msgid ""
":dp:`fls_q5akku2idrwh` An :t:`enum type` subject to :t:`C representation`"
" or :t:`primitive representation` has the same :t:`type representation` "
"as a :t:`union type` with :t:`C representation` that is laid out as "
"follows:"
msgstr ""

#: ../../src/types-and-traits.rst:1472
msgid ""
":dp:`fls_r6o1wv76yw6m` Each :t:`enum variant` corresponds to a "
":t:`struct` whose :t:`struct type` is subject to :t:`C representation` "
"and laid out as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:1476
msgid ""
":dp:`fls_3k1tcfxp0g63` The :t:`type` of the first :t:`field` of the "
":t:`struct type` is the :t:`discriminant type` of the :t:`enum type`."
msgstr ""

#: ../../src/types-and-traits.rst:1480
msgid ""
":dp:`fls_ebs77rxvk9st` The remaining :t:`[field]s` of the :t:`struct "
"type` are the :t:`[field]s` of the :t:`enum variant`, in the same "
"declarative order."
msgstr ""

#: ../../src/types-and-traits.rst:1484
msgid ""
":dp:`fls_k907i6w83s2` An :t:`enum type` subject to :t:`transparent "
"representation` has the same :t:`type representation` as the single "
":t:`field` of non-zero :t:`size` of its :t:`variant` if one is present, "
"otherwise the :t:`enum type` has :t:`size` zero and :t:`alignment` one."
msgstr ""

#: ../../src/types-and-traits.rst:1493
msgid "Struct Type Representation"
msgstr ""

#: ../../src/types-and-traits.rst:1497
msgid ""
":dp:`fls_jr9dykj6rydn` The :t:`alignment` of a :t:`struct type` subject "
"to :t:`C representation` is the :t:`alignment` of the most-aligned "
":t:`field` in it."
msgstr ""

#: ../../src/types-and-traits.rst:1501
msgid ""
":dp:`fls_6ck71twmnbg5` The :t:`size` of a :t:`struct type` subject to "
":t:`C representation` is determined as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:1505
msgid ":dp:`fls_hydq3pvm00bn` Initialize a current offset to zero."
msgstr ""

#: ../../src/types-and-traits.rst:1508
msgid ""
":dp:`fls_yzcdffahxcz` For each :t:`field` of the :t:`struct type` in "
"declarative order:"
msgstr ""

#: ../../src/types-and-traits.rst:1511
msgid ""
":dp:`fls_t2yqmphfd6he` Calculate the :t:`size` and :t:`alignment` of the "
":t:`field`."
msgstr ""

#: ../../src/types-and-traits.rst:1514
msgid ""
":dp:`fls_fa5nkvu07jlp` If the current offset is not a multiple of the "
":t:`[field]'s` :t:`alignment`, add byte padding to the current offset "
"until it is a multiple of the :t:`alignment`. The offset of the "
":t:`field` is the current offset."
msgstr ""

#: ../../src/types-and-traits.rst:1520
msgid ""
":dp:`fls_x2pkmgbp63xx` Increase the current offset by the :t:`size` of "
"the :t:`field`."
msgstr ""

#: ../../src/types-and-traits.rst:1523
msgid ":dp:`fls_y6dwc1ndm395` Proceed with the next :t:`field`."
msgstr ""

#: ../../src/types-and-traits.rst:1526
msgid ""
":dp:`fls_2npku94ookdn` Round up the current offset to the nearest "
"multiple of the :t:`[struct type]'s` :t:`alignment`."
msgstr ""

#: ../../src/types-and-traits.rst:1530
msgid ""
":dp:`fls_h7nvs25rsi0y` The :t:`size` of the :t:`struct type` is the "
"current offset."
msgstr ""

#: ../../src/types-and-traits.rst:1533
msgid ""
":dp:`fls_iu93vpyihrpj` A :t:`struct type` subject to :t:`transparent "
"representation` shall have:"
msgstr ""

#: ../../src/types-and-traits.rst:1536
msgid ":dp:`fls_7sjkej5otxo` A single :t:`field` of non-zero :t:`size`, or"
msgstr ""

#: ../../src/types-and-traits.rst:1539
msgid ""
":dp:`fls_gwhceoy0m3or` Any number of :t:`[field]s` of :t:`size` zero and "
":t:`alignment` one."
msgstr ""

#: ../../src/types-and-traits.rst:1542
msgid ""
":dp:`fls_hvkalvr4e2v0` A :t:`struct type` subject to :t:`transparent "
"representation` has the same :t:`type representation` as the single "
":t:`field` of non-zero :t:`size` if one is present, otherwise the "
":t:`struct type` has :t:`size` zero and :t:`alignment` one."
msgstr ""

#: ../../src/types-and-traits.rst:1551
msgid "Union Type Representation"
msgstr ""

#: ../../src/types-and-traits.rst:1555
msgid ""
":dp:`fls_opz1p1neldsg` The :t:`size` of a :t:`union type` subject to "
":t:`C representation` is the maximum of the :t:`[size]s` of all its "
":t:`[field]s`, rounded up to :t:`alignment` of the :t:`union type`."
msgstr ""

#: ../../src/types-and-traits.rst:1560
msgid ""
":dp:`fls_y5qtvbx5m90g` The :t:`alignment` of a :t:`union type` subject to"
" :t:`C representation` is the maximum of the :t:`[alignment]s` of all of "
"its :t:`[field]s`."
msgstr ""

#: ../../src/types-and-traits.rst:1567
msgid "Type Model"
msgstr ""

#: ../../src/types-and-traits.rst:1572
msgid "Recursive Types"
msgstr ""

#: ../../src/types-and-traits.rst:1576
msgid ""
":dp:`fls_z22std1crl49` A :t:`recursive type` is a category of :t:`type` "
"that may define other :t:`[type]s` within its :t:`type specification`."
msgstr ""

#: ../../src/types-and-traits.rst:1580
msgid ""
":dp:`fls_eddnwlr0rz59` A :t:`recursive type` shall include at least one "
":t:`abstract data type` in its recursion."
msgstr ""

#: ../../src/types-and-traits.rst:1596
msgid "Type Unification"
msgstr ""

#: ../../src/types-and-traits.rst:1600
msgid ""
":dp:`fls_ryvdhkgm7vzj` :t:`Type unification` is a measure of "
"compatibility between two :t:`[type]s`. A :t:`type` is said to :t:`unify`"
" with another :t:`type` when the domains, ranges and structures of both "
":t:`[type]s` are compatible."
msgstr ""

#: ../../src/types-and-traits.rst:1605
msgid ""
":dp:`fls_aie0tr62vhw5` Two types that :t:`unify` are said to be "
":t:`[unifiable type]s`."
msgstr ""

#: ../../src/types-and-traits.rst:1608
msgid ":dp:`fls_dhksyjrvx9a` A :t:`scalar type` is unifiable only with itself."
msgstr ""

#: ../../src/types-and-traits.rst:1611
msgid ""
":dp:`fls_hf0cfkrmt655` The :t:`never type` is unifiable with any other "
":t:`type`."
msgstr ""

#: ../../src/types-and-traits.rst:1614
msgid ""
":dp:`fls_k9dag68qpe93` An :t:`array type` is unifiable only with another "
":t:`array type` when"
msgstr ""

#: ../../src/types-and-traits.rst:1617
msgid ""
":dp:`fls_m6d9qj9q9u1i` The :t:`[element type]s` of both :t:`[array "
"type]s` are unifiable, and"
msgstr ""

#: ../../src/types-and-traits.rst:1620
msgid ":dp:`fls_gg3x25qvymmq` The sizes of both :t:`[array type]s` are the same."
msgstr ""

#: ../../src/types-and-traits.rst:1623
msgid ""
":dp:`fls_ni296ev8x9v9` A :t:`slice type` is unifiable only with another "
":t:`slice type` when the :t:`[element type]s` of both :t:`[slice type]s` "
"are unifiable."
msgstr ""

#: ../../src/types-and-traits.rst:1627
msgid ":dp:`fls_i1m41c4wkfc0` Type :c:`str` is unifiable only with itself."
msgstr ""

#: ../../src/types-and-traits.rst:1630
msgid ""
":dp:`fls_mpq64eal9jo3` A :t:`tuple type` is unifiable only with another "
":t:`tuple type` when:"
msgstr ""

#: ../../src/types-and-traits.rst:1633
msgid ""
":dp:`fls_kcr8npsmy0e5` The :t:`arity` of both :t:`[tuple type]s` is the "
"same, and"
msgstr ""

#: ../../src/types-and-traits.rst:1636
msgid ""
":dp:`fls_kq3lv1zbangz` The :t:`[type]s` of the corresponding :t:`[tuple "
"field]s` are unifiable."
msgstr ""

#: ../../src/types-and-traits.rst:1639
msgid ""
":dp:`fls_so2cgqmawlm7` An :t:`abstract data type` is unifiable only with "
"another :t:`abstract data type` when:"
msgstr ""

#: ../../src/types-and-traits.rst:1643
msgid ""
":dp:`fls_vsax8w6y794m` The two :t:`[abstract data type]s` are the same "
":t:`type`, and"
msgstr ""

#: ../../src/types-and-traits.rst:1646
msgid ""
":dp:`fls_1j1wc3uxs7h6` The corresponding :t:`[generic substitution]s` are"
" unifiable."
msgstr ""

#: ../../src/types-and-traits.rst:1649
msgid ""
":dp:`fls_9dpea9ty0c2l` A :t:`closure type` is unifiable only with another"
" :t:`closure type` when:"
msgstr ""

#: ../../src/types-and-traits.rst:1652
msgid ""
":dp:`fls_42oj1ekjihq1` The :t:`[two closure type]s` are the same closure,"
" and"
msgstr ""

#: ../../src/types-and-traits.rst:1655
msgid ""
":dp:`fls_gebpqqqvvklf` The corresponding :t:`[generic substitution]s` are"
" unifiable."
msgstr ""

#: ../../src/types-and-traits.rst:1658
msgid ""
":dp:`fls_i221hm7rssik` A :t:`function item type` is unifiable only with "
"another :t:`function item type` when:"
msgstr ""

#: ../../src/types-and-traits.rst:1662
msgid ""
":dp:`fls_74cug5zfv2wv` The :t:`[two function item type]s` are the same "
"function, and"
msgstr ""

#: ../../src/types-and-traits.rst:1665
msgid ""
":dp:`fls_keezxl8v4snf` The corresponding :t:`[generic substitution]s` are"
" unifiable."
msgstr ""

#: ../../src/types-and-traits.rst:1668
msgid ""
":dp:`fls_wz2etmkpvxed` A :t:`function pointer type` is unifiable only "
"with another :t:`function pointer type` when:"
msgstr ""

#: ../../src/types-and-traits.rst:1672
msgid ""
":dp:`fls_rmqcbb5ja4va` The :t:`[lifetime]s` are :t:`variant` conformant, "
"and"
msgstr ""

#: ../../src/types-and-traits.rst:1675
msgid ":dp:`fls_uu8je75y5pss` The :t:`safety` is the same, and"
msgstr ""

#: ../../src/types-and-traits.rst:1678
msgid ":dp:`fls_oksjiq3nmq2k` The :t:`ABI` is the same, and"
msgstr ""

#: ../../src/types-and-traits.rst:1681
msgid ""
":dp:`fls_52ymp79ert2` The number of :t:`[function parameter]s` is the "
"same, and"
msgstr ""

#: ../../src/types-and-traits.rst:1684
msgid ""
":dp:`fls_g2u1dfhphrrg` The :t:`[type]s` of the corresponding "
":t:`[function parameter]s` are unifiable, and"
msgstr ""

#: ../../src/types-and-traits.rst:1688
msgid ""
":dp:`fls_2xgq66qp3h95` The presence of a :t:`variadic part` is the same, "
"and"
msgstr ""

#: ../../src/types-and-traits.rst:1691
msgid ":dp:`fls_5dh8c5gg0hmk` The :t:`[return type]s` are unifiable."
msgstr ""

#: ../../src/types-and-traits.rst:1694
msgid ""
":dp:`fls_ismr7wwvek4q` A :t:`raw pointer type` is unifiable only with "
"another :t:`raw pointer type` when:"
msgstr ""

#: ../../src/types-and-traits.rst:1698
msgid ":dp:`fls_x9933rjecrna` The :t:`mutability` is the same, and"
msgstr ""

#: ../../src/types-and-traits.rst:1701
msgid ":dp:`fls_mizmcykgdisb` The :t:`[target type]s` are unifiable."
msgstr ""

#: ../../src/types-and-traits.rst:1704
msgid ""
":dp:`fls_paoh0wttde2z` A :t:`reference type` is unifiable only with "
"another :t:`reference type` when:"
msgstr ""

#: ../../src/types-and-traits.rst:1707
msgid ":dp:`fls_akko4dmp4nkw` The :t:`mutability` is the same, and"
msgstr ""

#: ../../src/types-and-traits.rst:1710
msgid ":dp:`fls_8gldjjxbyyb4` The :t:`[target type]s` are unifiable."
msgstr ""

#: ../../src/types-and-traits.rst:1713
msgid ""
":dp:`fls_8jad1ztcuxha` An :t:`anonymous return type` is unifiable with "
"another :t:`type` when:"
msgstr ""

#: ../../src/types-and-traits.rst:1716
msgid ""
":dp:`fls_j3w9ap9zaqud` The :t:`[lifetime]s` are :t:`variant` conformant, "
"and"
msgstr ""

#: ../../src/types-and-traits.rst:1719
msgid ""
":dp:`fls_yvllot5qnc4s` The other :t:`type` implements all :t:`[trait]s` "
"specified by the :t:`anonymous return type`, and"
msgstr ""

#: ../../src/types-and-traits.rst:1723
msgid ""
":dp:`fls_hza5n5eb18ta` An :t:`impl trait type` is unifiabe only with "
"itself."
msgstr ""

#: ../../src/types-and-traits.rst:1726
msgid ""
":dp:`fls_ww16urcjrj6i` A :t:`trait object type` is unifiable only with "
"another :t:`trait object type` when:"
msgstr ""

#: ../../src/types-and-traits.rst:1730
msgid ":dp:`fls_bnp6or49voxp` The :t:`[bound]s` are unifiable, and"
msgstr ""

#: ../../src/types-and-traits.rst:1733
msgid ":dp:`fls_hdo4c849q3lo` The :t:`[lifetime]s` are unifiable."
msgstr ""

#: ../../src/types-and-traits.rst:1736
msgid ""
":dp:`fls_zh5hhq2x9h4q` A :t:`general type variable` is unifiable with any"
" other type."
msgstr ""

#: ../../src/types-and-traits.rst:1739
msgid ""
":dp:`fls_3xpp05fm0zpb` A :t:`floating-point type variable` is unifiable "
"only with a :t:`floating-point type`."
msgstr ""

#: ../../src/types-and-traits.rst:1743
msgid ""
":dp:`fls_qtuq6q3ylic` An :t:`integer type variable` is unifiable only "
"with an :t:`integer type`."
msgstr ""

#: ../../src/types-and-traits.rst:1746
msgid ""
":dp:`fls_w9dx5h7m31sj` A :t:`type alias` is unifiable with another "
":t:`type` when the aliased :t:`type` is unifiable with the other "
":t:`type`."
msgstr ""

#: ../../src/types-and-traits.rst:1753
msgid "Type Coercion"
msgstr ""

#: ../../src/types-and-traits.rst:1757
msgid ""
":dp:`fls_w5pjcj9qmgbv` :t:`Type coercion` is an implicit operation that "
"changes the :t:`type` of a :t:`value`. Any implicit conversion allowed by"
" :t:`type coercion` can be made explicit using a :t:`type cast "
"expression`."
msgstr ""

#: ../../src/types-and-traits.rst:1762
msgid ""
":dp:`fls_5v0n2a32bk95` A :t:`type coercion` takes place at a :t:`coercion"
" site` or within a :t:`coercion-propagating expression`."
msgstr ""

#: ../../src/types-and-traits.rst:1766
msgid ""
":dp:`fls_j3kbaf43sgpj` The following :t:`[construct]s` constitute a "
":dt:`coercion site`:"
msgstr ""

#: ../../src/types-and-traits.rst:1769
msgid ""
":dp:`fls_sp794uzfiofr` A :t:`let statement` with an explicit :t:`type "
"specification`."
msgstr ""

#: ../../src/types-and-traits.rst:1772
msgid ":dp:`fls_bhzmble1itog` A :t:`constant` declaration."
msgstr ""

#: ../../src/types-and-traits.rst:1775
msgid ":dp:`fls_xfqny6bwzsu9` A :t:`static` declaration."
msgstr ""

#: ../../src/types-and-traits.rst:1778
msgid ""
":dp:`fls_wxrugvlazy6v` The :t:`[argument]s` of a :t:`call expression` or "
"a :t:`method call expression`."
msgstr ""

#: ../../src/types-and-traits.rst:1782
msgid ""
":dp:`fls_eu4bt3dw1b8c` The :t:`instantiation` of a :t:`field` of an "
":t:`abstract data type`."
msgstr ""

#: ../../src/types-and-traits.rst:1785
msgid ":dp:`fls_apstt4elv2k7` A :t:`function` result."
msgstr ""

#: ../../src/types-and-traits.rst:1788
msgid ""
":dp:`fls_u0e42y7nvn7e` The following :t:`[expression]s` constitute a :dt"
":`coercion-propagating expression`:"
msgstr ""

#: ../../src/types-and-traits.rst:1792
msgid ":dp:`fls_p8hp5y506nam` Each :t:`operand` of an :t:`array expression`."
msgstr ""

#: ../../src/types-and-traits.rst:1795
msgid ""
":dp:`fls_fjc9xev8rcu6` The :t:`tail expression` of a :t:`block "
"expression`."
msgstr ""

#: ../../src/types-and-traits.rst:1798
msgid ""
":dp:`fls_n1kh3z8d4q8y` The :t:`operand` of a :t:`parenthesized "
"expression`."
msgstr ""

#: ../../src/types-and-traits.rst:1801
msgid ":dp:`fls_dgoypa3hcxc0` Each :t:`operand` of a :t:`tuple expression`."
msgstr ""

#: ../../src/types-and-traits.rst:1804
msgid ""
":dp:`fls_h8dkehit8rza` :t:`Type coercion` from a source :t:`type` to a "
"target :t:`type` is allowed to occur when:"
msgstr ""

#: ../../src/types-and-traits.rst:1808
msgid ""
":dp:`fls_z00wtlna6grk` The source :t:`type` is a :t:`subtype` of the "
"target :t:`type`."
msgstr ""

#: ../../src/types-and-traits.rst:1811
msgid ""
":dp:`fls_rfjdh79k0wou` The source :t:`type` ``T`` coerces to intermediate"
" :t:`type` ``W``, and intermediate :t:`type` ``W`` coerces to target "
":t:`type` ``U``."
msgstr ""

#: ../../src/types-and-traits.rst:1815
msgid ""
":dp:`fls_e3lgrtqb7jwe` The source :t:`type` is ``&T`` and the target "
":t:`type` is ``*const T``."
msgstr ""

#: ../../src/types-and-traits.rst:1818
msgid ""
":dp:`fls_fwy2z11c1sji` The source :t:`type` is ``&T`` and the target "
":t:`type` is ``&U``, where ``T`` implements the ``core::ops::Deref<Target"
" = U>`` :t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:1822
msgid ""
":dp:`fls_aujb44849tq1` The source :t:`type` is ``&mut T`` and the target "
":t:`type` is ``&T``."
msgstr ""

#: ../../src/types-and-traits.rst:1825
msgid ""
":dp:`fls_p3ym3ycrnd5m` The source :t:`type` is ``&mut T`` and the target "
":t:`type` is ``*mut T``."
msgstr ""

#: ../../src/types-and-traits.rst:1828
msgid ""
":dp:`fls_jmo42qgix5uw` The source :t:`type` is ``&mut T`` and the target "
":t:`type` is ``&U``, where ``T`` implements the ``core::ops::Deref<Target"
" = U>`` :t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:1832
msgid ""
":dp:`fls_tbt4236igdzb` The source :t:`type` is ``&mut T`` and the target "
":t:`type` is ``&mut U``, where ``T`` implements the "
"``core::ops::DerefMut<Target = U>`` :t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:1836
msgid ""
":dp:`fls_7ri4jk2dydfn` The source :t:`type` is ``*mut T`` and the target "
":t:`type` is ``*const T``."
msgstr ""

#: ../../src/types-and-traits.rst:1839
msgid ""
":dp:`fls_6r3kn0nk5b8o` The source :t:`type` is ``type_constructor(T)`` "
"and the target :t:`type` is ``type_constructor(U)``, where "
"``type_constructor`` is one of ``&W``, ``&mut W``, ``*const W``, or "
"``*mut W``, and ``U`` can be obtained from ``T`` using :t:`unsized "
"coercion`."
msgstr ""

#: ../../src/types-and-traits.rst:1845
msgid ""
":dp:`fls_ulcdetwp6x96` The source :t:`type` is a :t:`function item type` "
"and the target :t:`type` is a :t:`function pointer type`."
msgstr ""

#: ../../src/types-and-traits.rst:1849
msgid ""
":dp:`fls_2uv1r0gni1fk` The source :t:`type` is a non-capturing "
":t:`closure type` and the target :t:`type` is a :t:`function pointer "
"type`."
msgstr ""

#: ../../src/types-and-traits.rst:1853
msgid ""
":dp:`fls_sf0c3fbx8z57` The source :t:`type` is the :t:`never type` and "
"the target :t:`type` is any :t:`type`."
msgstr ""

#: ../../src/types-and-traits.rst:1857
msgid ""
":dp:`fls_iiiu2q7pym4p` An :t:`unsized coercion` is a :t:`type coercion` "
"that converts a :t:`sized type` into an :t:`unsized type`. :t:`Unsized "
"coercion` from a source :t:`type` to a target :t:`type` is allowed to "
"occur when:"
msgstr ""

#: ../../src/types-and-traits.rst:1862
msgid ""
":dp:`fls_jte6n2js32af` The source :t:`type` is :t:`array type` ``[T; N]``"
" and the target :t:`type` is :t:`slice type` ``[T]``."
msgstr ""

#: ../../src/types-and-traits.rst:1866
msgid ""
":dp:`fls_20pvqqayzqra` The source :t:`type` is ``T`` and the target "
":t:`type` is ``dyn U``, where ``T`` implements ``U + "
"core::marker::Sized``, and ``U`` is :t:`object safe`."
msgstr ""

#: ../../src/types-and-traits.rst:1870
msgid ":dp:`fls_j8rcy0xvd155` The source type is"
msgstr ""

#: ../../src/types-and-traits.rst:1880
msgid ":dp:`fls_wuka4uyo3oj7` where"
msgstr ""

#: ../../src/types-and-traits.rst:1883
msgid ":dp:`fls_w15yo8yvuxq3` ``S`` is a :t:`struct type`,"
msgstr ""

#: ../../src/types-and-traits.rst:1886
msgid ":dp:`fls_7aw3ifbvfgbd` ``T`` implements ``core::marker::Unsize<U>``,"
msgstr ""

#: ../../src/types-and-traits.rst:1889
msgid ":dp:`fls_cnkth59djwgl` ``last_field`` is a :t:`struct field` of ``S``,"
msgstr ""

#: ../../src/types-and-traits.rst:1892
msgid ""
":dp:`fls_4wbk7pqj010i` The :t:`type` of ``last_field`` involves ``T`` and"
" if the :t:`type` of ``last_field`` is ``W<T>``, then ``W<T>`` implements"
" ``core::marker::Unsize<W<U>>``,"
msgstr ""

#: ../../src/types-and-traits.rst:1897
msgid ""
":dp:`fls_47u0039t0l8f` ``T`` is not part of any other :t:`struct field` "
"of ``S``."
msgstr ""

#: ../../src/types-and-traits.rst:1900
msgid ":dp:`fls_bmh6g3jju7eq` and the target ``type`` is ``S<..., U, ...>``."
msgstr ""

#: ../../src/types-and-traits.rst:1903
msgid ""
":dp:`fls_da4w32rsrwxc` :dt:`Least upper bound coercion` is a "
":t:`multi-[type coercion]` that is used in the following scenarios:"
msgstr ""

#: ../../src/types-and-traits.rst:1907
msgid ""
":dp:`fls_zi5311z1w7re` To find the common :t:`type` of multiple :t:`if "
"expression` branches."
msgstr ""

#: ../../src/types-and-traits.rst:1910
msgid ""
":dp:`fls_zst5pa29rpt` To find the common :t:`type` of multiple :t:`if let"
" expression` branches."
msgstr ""

#: ../../src/types-and-traits.rst:1913
msgid ""
":dp:`fls_agw1aej616vf` To find the common :t:`type` for multiple "
":t:`match expression` :t:`[match arm]s`."
msgstr ""

#: ../../src/types-and-traits.rst:1917
msgid ""
":dp:`fls_tnbga5dl4gz8` To find the common :t:`type` of :t:`array "
"expression` :t:`[operand]s`."
msgstr ""

#: ../../src/types-and-traits.rst:1920
msgid ""
":dp:`fls_yoreux8tn65x` To find the :t:`return type` of a :t:`closure "
"expression` with multiple :t:`[return expression]s`."
msgstr ""

#: ../../src/types-and-traits.rst:1924
msgid ""
":dp:`fls_r11shke69uu6` To find the :t:`return type` of a :t:`function` "
"with multiple :t:`[return expression]s`."
msgstr ""

#: ../../src/types-and-traits.rst:1928
msgid ""
":dp:`fls_ky7ykpufb95t` :t:`Least upper bound coercion` considers a set of"
" source :t:`[type]s` ``T1``, ``T2``, ``...``, ``TN`` and target :t:`type`"
" ``U``. The target :t:`type` is obtained as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:1933
msgid ""
":dp:`fls_8kvme0u4u8r6` Initialize target :t:`type` ``U`` to source "
":t:`type` ``T1``."
msgstr ""

#: ../../src/types-and-traits.rst:1936
msgid ""
":dp:`fls_rl9yrdfwnu03` For each current source :t:`type` ``TC`` in the "
"inclusive range ``T1`` to ``TN``"
msgstr ""

#: ../../src/types-and-traits.rst:1940
msgid ""
":dp:`fls_iqtmhn8flws7` If ``TC`` can be coerced to ``U``, then continue "
"with the next source :t:`type`."
msgstr ""

#: ../../src/types-and-traits.rst:1944
msgid ""
":dp:`fls_sr8d5har4s03` Otherwise if ``U`` can be coerced to ``TC``, make "
"``TC`` the target :t:`type` ``U``."
msgstr ""

#: ../../src/types-and-traits.rst:1948
msgid ""
":dp:`fls_92pwnd1xbp5r` Otherwise compute the mutual supertype of ``TC`` "
"and ``U``, make the mutual supertype be target :t:`type` ``U``. It is a "
"static error if the mutual supertype of ``TC`` and ``U`` cannot be "
"computed."
msgstr ""

#: ../../src/types-and-traits.rst:1953
msgid ":dp:`fls_ju4ypa5ysga0` Continue with the next source :t:`type`."
msgstr ""

#: ../../src/types-and-traits.rst:1959
msgid "Type Inference"
msgstr ""

#: ../../src/types-and-traits.rst:1963
msgid ""
":dp:`fls_h8sedxew0d4u` :t:`Constant` declarations, :t:`[let statement]s`,"
" and :t:`[static declaration]s` impose an :dt:`expected type` on their "
"respective initialization :t:`[expression]s`. :t:`Type inference` is the "
"process of deducing the expected :t:`type` of an arbitrary :t:`value`."
msgstr ""

#: ../../src/types-and-traits.rst:1969
msgid ""
":dp:`fls_uvvn4usfsbhr` A :t:`type variable` is a placeholder for a "
":t:`type`. A :t:`global type variable` is a :t:`type variable` that can "
"refer to any :t:`type`."
msgstr ""

#: ../../src/types-and-traits.rst:1973
msgid ""
":dp:`fls_5d4hw3gj4w4n` The :t:`expected type` of the :t:`constant "
"initializer` of a :t:`constant` is the :t:`type` specified by its "
":t:`type ascription`."
msgstr ""

#: ../../src/types-and-traits.rst:1977
msgid ""
":dp:`fls_v6z48i1b7vxv` The :t:`expected type` of the initialization "
":t:`expression` of a :t:`let statement` is determined as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:1981
msgid ""
":dp:`fls_qob4wjgza3i8` If the :t:`let statement` appears with a :t:`type "
"ascription`, then the :t:`expected type` is the :t:`type` specified by "
"its :t:`type ascription`."
msgstr ""

#: ../../src/types-and-traits.rst:1985
msgid ""
":dp:`fls_7vdr0mh7kmpz` Otherwise the :t:`expected type` is a :t:`general "
"type variable`."
msgstr ""

#: ../../src/types-and-traits.rst:1988
msgid ""
":dp:`fls_qlovdtcj1v1b` The :t:`expected type` of the :t:`static "
"initializer` of a :t:`static` is the :t:`type` specified by its :t:`type "
"ascription`."
msgstr ""

#: ../../src/types-and-traits.rst:1992
msgid ""
":dp:`fls_biyyicl3c3kn` :t:`[Arithmetic expression]s`, :t:`[await "
"expression]s`, :t:`[block expression]s`, :t:`[borrow expression]s`, "
":t:`[dereference expression]s`, :t:`[call expression]s`, :t:`[else "
"expression]s`, :t:`[error propagation expression]s`, :t:`[if "
"expression]s`, :t:`[if let expression]s`, :t:`[logical expression]s`, "
":t:`[loop expression]s`, :t:`[match expression]s`, :t:`[negation "
"expression]s`, and :t:`[parenthesized expression]s` are :dt:`[type "
"imposing expression]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2001
msgid ""
":dp:`fls_o94mhge1j3iw` A :t:`type imposing expression` imposes its "
":t:`expected type` onto a nested :t:`construct`, as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:2005
msgid ""
":dp:`fls_3ihttknfccxr` An :t:`addition expression` imposes its "
":t:`expected type` onto :t:`associated type` "
":std:`core::ops::Add::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2009
msgid ""
":dp:`fls_rta6ehkzp3hg` A :t:`division expression` imposes its "
":t:`expected type` onto :t:`associated type` "
":std:`core::ops::Div::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2013
msgid ""
":dp:`fls_f2whukg3x1yo` A :t:`multiplication expression` imposes its "
":t:`expected type` onto :t:`associated type` "
":std:`core::ops::Mul::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2017
msgid ""
":dp:`fls_w9fp1usbb15` A :t:`remainder expression` imposes its "
":t:`expected type` onto :t:`associated type` "
":std:`core::ops::Rem::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2021
msgid ""
":dp:`fls_5s2eh0qjq6vk` A :t:`subtraction expression` imposes its "
":t:`expected type` onto :t:`associated type` "
":std:`core::ops::Sub::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2025
msgid ""
":dp:`fls_rpxxg2u4hzhc` An :t:`await expression` imposes its :t:`expected "
"type` onto :t:`associated type` :std:`core::future::Future::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2029
msgid ""
":dp:`fls_vj1071lxoyyv` A :t:`bit and expression` imposes its :t:`expected"
" type` onto :t:`associated type` :std:`core::ops::BitAnd::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2033
msgid ""
":dp:`fls_y6owsf8jnx35` A :t:`bit xor expression` imposes its :t:`expected"
" type` onto :t:`associated type` :std:`core::ops::BitXor::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2037
msgid ""
":dp:`fls_i9dhdmiqde99` A :t:`bit or expression` imposes its :t:`expected "
"type` onto :t:`associated type` :std:`core::ops::BitOr::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2041
msgid ""
":dp:`fls_bystnhv1olg5` A :t:`shift left expression` imposes its "
":t:`expected type` onto :t:`associated type` "
":std:`core::ops::Shl::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2045
msgid ""
":dp:`fls_trvksnbx7opg` A :t:`shift right expression` imposes its "
":t:`expected type` onto :t:`associated type` "
":std:`core::ops::Shr::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2049
msgid ""
":dp:`fls_8ct11ekq3p5q` A :t:`block expression` imposes its :t:`expected "
"type` onto its :t:`tail expression`. If the :t:`block expression` is "
"associated with a :t:`loop expression`, then the :t:`block expression` "
"imposes its :t:`expected type` onto each :t:`break expression` within its"
" :t:`statement` list. If the :t:`block expression` is associated with a "
":t:`function`, then the :t:`block expression` imposes its :t:`expected "
"type` onto each :t:`return expression` within its :t:`statement` list."
msgstr ""

#: ../../src/types-and-traits.rst:2058
msgid ""
":dp:`fls_eee1t7hynswa` A :t:`borrow expression` imposes its :t:`expected "
"type` onto its :t:`operand`."
msgstr ""

#: ../../src/types-and-traits.rst:2061
msgid ""
":dp:`fls_ax86vtmz4hrb` A :t:`dereference expression` imposes its "
":t:`expected type` onto its :t:`operand`."
msgstr ""

#: ../../src/types-and-traits.rst:2065
msgid ""
":dp:`fls_kviulvlfvww2` A :t:`call expression` imposes its :t:`expected "
"type` onto :t:`associated type` :std:`core::ops::FnOnce::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2069
msgid ""
":dp:`fls_4hsgi1voem9y` An :t:`error propagation expression` imposes its "
":t:`expected type` onto its operand."
msgstr ""

#: ../../src/types-and-traits.rst:2073
msgid ""
":dp:`fls_8zpltmxy41rd` An :t:`if expression` imposes its :t:`expected "
"type` onto its :t:`block expression` and else expression."
msgstr ""

#: ../../src/types-and-traits.rst:2077
msgid ""
":dp:`fls_qdmyerpgnwha` An :t:`if let expression` imposes its :t:`expected"
" type` onto its :t:`block expression` and :t:`else expression`."
msgstr ""

#: ../../src/types-and-traits.rst:2081
msgid ""
":dp:`fls_gmojdinhct0b` A :t:`lazy boolean expression` imposes its "
":t:`expected type` onto its :t:`[operand]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2085
msgid ""
":dp:`fls_d8f7xb8r3aud` A :t:`loop expression` imposes its :t:`expected "
"type` onto its :t:`block expression`."
msgstr ""

#: ../../src/types-and-traits.rst:2089
msgid ""
":dp:`fls_ds3nkfar77in` A :t:`match expression` imposes its :t:`expected "
"type` onto the :t:`expression-with-block` or :t:`expression-without-"
"block` of every :t:`intermediate match arm` and the :t:`expression` of "
"its :t:`final match arm`."
msgstr ""

#: ../../src/types-and-traits.rst:2095
msgid ""
":dp:`fls_xhax58ebkqik` A :t:`negation expression` imposes its "
":t:`expected type` onto :t:`associated type` "
":std:`core::ops::Neg::Output`."
msgstr ""

#: ../../src/types-and-traits.rst:2099
msgid ""
":dp:`fls_m896wu8zax5k` A :t:`parenthesized expression` imposes its "
":t:`expected type` onto its :t:`operand`."
msgstr ""

#: ../../src/types-and-traits.rst:2103
msgid ""
":dp:`fls_8ft8d4x1q08p` A :t:`return expression` imposes its :t:`expected "
"type` onto its :t:`operand`."
msgstr ""

#: ../../src/types-and-traits.rst:2106
msgid ""
":dp:`fls_aaumn7viouu7` :t:`[Array expression]s`, :t:`[array index "
"expression]s`, :t:`[assignment expression]s`, :t:`[closure expression]s`,"
" :t:`[comparison expression]s`, :t:`[compound assignment expression]s`, "
":t:`[field access expression]s`, :t:`[lazy boolean expression]s`, "
":t:`[method call expression]s`, :t:`[range expression]s`, :t:`[struct "
"expression]s`, :t:`[tuple expression]s`, and :t:`[type cast expression]s`"
" are :dt:`[type resolving expression]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2114
msgid ""
":dp:`fls_r7dyhfmdentz` A :t:`type resolving expression` provides a "
":dt:`resolving type`, which is the :t:`type` of the :t:`expression` "
"itself."
msgstr ""

#: ../../src/types-and-traits.rst:2118
msgid ""
":dp:`fls_3hv3wxkhjjp1` A :t:`floating-point type variable` is a :t:`type "
"variable` that can refer only to :t:`[floating-point type]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2122
msgid ""
":dp:`fls_8zkvwpkgob6d` The :t:`resolving type` of a :t:`float literal` is"
" determined as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:2125
msgid ""
":dp:`fls_1dvk2vvdw0oj` If the :t:`float literal` has a :t:`float suffix`,"
" then the :t:`resolving type` is the :t:`type` specified by its :t:`float"
" suffix`."
msgstr ""

#: ../../src/types-and-traits.rst:2129
msgid ""
":dp:`fls_gp9gcxiapfxv` Otherwise the :t:`resolving type` is a :t"
":`floating-point type variable`."
msgstr ""

#: ../../src/types-and-traits.rst:2132
msgid ""
":dp:`fls_7ov36fpd9mwe` An :t:`integer type variable` is a :t:`type "
"variable` that can refer only to :t:`[integer type]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2136
msgid ""
":dp:`fls_v9lyy98dgm98` The :t:`resolving type` of an :t:`integer literal`"
" is determined as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:2139
msgid ""
":dp:`fls_i3v9yqp7j4n` If the :t:`integer literal` has an :t:`integer "
"suffix`, then the :t:`resolving type` is the :t:`type` specified by its "
":t:`integer suffix`."
msgstr ""

#: ../../src/types-and-traits.rst:2143
msgid ""
":dp:`fls_z03x5pk7q9dd` Otherwise the :t:`resolving type` is an "
":t:`integer type variable`."
msgstr ""

#: ../../src/types-and-traits.rst:2146
msgid ""
":dp:`fls_ybvrhh96fc7y` :t:`[Constant argument]s`, :t:`constant` "
"declarations, :t:`[function]s`, and :t:`static` declarations are referred"
" to as :dt:`[type inference root]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2150
msgid ""
":dp:`fls_j28usox2uzep` :t:`Type inference` for a single :t:`type "
"inference root` proceeds as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:2153
msgid ""
":dp:`fls_7pwr5jeis2n8` Determine unique :t:`expected type` ``ET`` for the"
" :t:`type inference root`."
msgstr ""

#: ../../src/types-and-traits.rst:2156
msgid ""
":dp:`fls_wqyw2u3tjzmv` Resolve the initialization :t:`expression` of the "
":t:`type inference root` against ``ET`` as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:2160
msgid ""
":dp:`fls_a0d3x44wboz4` If the :t:`expression` is a :t:`type imposing "
"expression`, then"
msgstr ""

#: ../../src/types-and-traits.rst:2163
msgid ":dp:`fls_62yj5vkp0iox` Make ``ET`` the :t:`type` of the :t:`expression`."
msgstr ""

#: ../../src/types-and-traits.rst:2166
msgid ""
":dp:`fls_h0e7634x6go9` Impose ``ET`` on any nested :t:`construct` "
"depending on the nature of the :t:`expression`, recursively."
msgstr ""

#: ../../src/types-and-traits.rst:2170
msgid ""
":dp:`fls_7zzz1ao7k42e` If the :t:`expression` is a :t:`type resolving "
"expression`, then"
msgstr ""

#: ../../src/types-and-traits.rst:2173
msgid ""
":dp:`fls_9swsddkfjw1r` Determine :t:`resolving type` ``RT`` the "
":t:`expression`."
msgstr ""

#: ../../src/types-and-traits.rst:2176
msgid ":dp:`fls_59p9pd4jo8wt` Resolve ``ET`` against ``RT``."
msgstr ""

#: ../../src/types-and-traits.rst:2179
msgid ""
":dp:`fls_ynsjdua73fcl` If there are :t:`[expression]s` whose :t:`type` "
"``T`` is a :t:`floating-point type variable`, replace ``T`` with "
":t:`type` :c:`f64`."
msgstr ""

#: ../../src/types-and-traits.rst:2183
msgid ""
":dp:`fls_oz057wsgk05e` If there are :t:`[expression]s` whose :t:`type` "
"``T`` is an :t:`integer type variable`, replace ``T`` with :t:`type` "
":c:`i32`."
msgstr ""

#: ../../src/types-and-traits.rst:2187
msgid ""
":dp:`fls_2eu3zcuznfrk` If there are :t:`[expression]s` whose :t:`type` is"
" a :t:`global type variable`, then this is a static error."
msgstr ""

#: ../../src/types-and-traits.rst:2191
msgid ""
":dp:`fls_iqf4muk5nrot` Resolving :t:`expected type` ``ET`` against "
":t:`resolving type` ``RT`` for an :t:`expression` proceeds as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:2195
msgid ""
":dp:`fls_qdpf7tahw1go` If both ``ET`` and ``RT`` denote a :t:`concrete "
"type`, then ``ET`` and ``RT`` shall be :t:`unifiable`."
msgstr ""

#: ../../src/types-and-traits.rst:2199
msgid ""
":dp:`fls_yqsl1gg27b5o` If ``ET`` denotes a :t:`global type variable` and "
"``RT`` denotes a :t:`concrete type`, then ``ET`` is replaced with ``RT``,"
" effectively changing the :t:`type` of all :t:`[expression]s` that "
"previously held ``ET``."
msgstr ""

#: ../../src/types-and-traits.rst:2204
msgid ""
":dp:`fls_c4i80gd8cdub` If ``ET`` denotes a :t:`floating-point type "
"variable` and ``RT`` denotes a :t:`floating point type`, then ``ET`` is "
"replaced with ``RT``, effectively changing the :t:`type` of all "
":t:`[expression]s` that previously held ``ET``."
msgstr ""

#: ../../src/types-and-traits.rst:2209
msgid ""
":dp:`fls_acd7b3m1qm3a` If ``ET`` denotes an :t:`integer type variable` "
"and ``RT`` denotes an :t:`integer type`, then ``ET`` is replaced with "
"``RT``, effectively changing the :t:`type` of all :t:`[expression]s` that"
" previously held ``ET``."
msgstr ""

#: ../../src/types-and-traits.rst:2214
msgid ":dp:`fls_riivz4mlwr4y` Otherwise this is a static error."
msgstr ""

#: ../../src/types-and-traits.rst:2220
msgid "Traits"
msgstr ""

#: ../../src/types-and-traits.rst:2237
msgid ""
":dp:`fls_tani6lesan9u` A :t:`trait` is an :t:`item` that describes an "
"interface a :t:`type` can implement."
msgstr ""

#: ../../src/types-and-traits.rst:2241
msgid ""
":dp:`fls_ytn5cdonytyn` A :t:`subtrait` shall not be its own "
":t:`supertrait`."
msgstr ""

#: ../../src/types-and-traits.rst:2244
msgid ":dp:`fls_vucd1u38sq7i` A :t:`trait` of the form"
msgstr ""

#: ../../src/types-and-traits.rst:2251
msgid ""
":dp:`fls_kyr81mi01me2` is equivalent to a :t:`where clause` of the "
"following form:"
msgstr ""

#: ../../src/types-and-traits.rst:2267
msgid ":dp:`fls_mjg7yrq66hh0` Shape is a supertrait of Circle."
msgstr ""

#: ../../src/types-and-traits.rst:2276
msgid ":dp:`fls_ydowwijzirmm` Circle is a subtrait of Shape."
msgstr ""

#: ../../src/types-and-traits.rst:2288
msgid "Object Safety"
msgstr ""

#: ../../src/types-and-traits.rst:2292
msgid ":dp:`fls_lrdki56hpc3k` A trait is :t:`object safe` when:"
msgstr ""

#: ../../src/types-and-traits.rst:2295
msgid ":dp:`fls_5wlltclogfkw` Its :t:`[supertrait]s` are :t:`object safe`, and"
msgstr ""

#: ../../src/types-and-traits.rst:2298
msgid ""
":dp:`fls_droy0w5gtqaw` :std:`core::marker::Sized` is not a "
":t:`supertrait`, and"
msgstr ""

#: ../../src/types-and-traits.rst:2301
msgid ":dp:`fls_46gd1q80c6bn` It lacks :t:`[associated constant]s`, and"
msgstr ""

#: ../../src/types-and-traits.rst:2304
msgid ""
":dp:`fls_kwo4cknx0yat` Its :t:`[associated function]s` are :t:`object "
"safe`."
msgstr ""

#: ../../src/types-and-traits.rst:2307
msgid ""
":dp:`fls_uixekv82g2e5` An :t:`associated function` is :t:`object safe` "
"when it is either an :t:`object safe` dispatchable :t:`function` or an "
":t:`object safe` non-dispatchable :t:`function`."
msgstr ""

#: ../../src/types-and-traits.rst:2312
msgid ""
":dp:`fls_72tvfoemwpyy` A dispatchable :t:`function` is :t:`object safe` "
"when:"
msgstr ""

#: ../../src/types-and-traits.rst:2315
msgid ":dp:`fls_j7nb34o87l1z` It lacks :t:`[generic parameter]s`, and"
msgstr ""

#: ../../src/types-and-traits.rst:2318
msgid ""
":dp:`fls_k1vc9vd8at92` Is a :t:`method` that does not use :c:`Self` "
"except as the :t:`type` of its :t:`receiver`, and"
msgstr ""

#: ../../src/types-and-traits.rst:2322
msgid ""
":dp:`fls_32nk904hwjao` Is a :t:`method` whose :t:`receiver` is either "
"``&Self``, ``&mut Self``, or ``core::pin::Pin<T>`` where T is one of the "
"previous :t:`[receiver]s`, and"
msgstr ""

#: ../../src/types-and-traits.rst:2326
msgid ""
":dp:`fls_kqylg31sm5wv` It lacks a :t:`where clause` that specifies the "
":std:`core::marker::Sized` :t:`trait`."
msgstr ""

#: ../../src/types-and-traits.rst:2330
msgid ""
":dp:`fls_aer3gaur7avp` A non-dispatchable :t:`function` is :t:`object "
"safe` when it specifies a :std:`core::marker::Sized` :t:`t[rait bound]` "
"for :c:`Self`."
msgstr ""

#: ../../src/types-and-traits.rst:2337
msgid "Trait and Lifetime Bounds"
msgstr ""

#: ../../src/types-and-traits.rst:2370
msgid ""
":dp:`fls_5g508z6c7q5f` A :t:`bound` imposes a constraint on :t:`[generic "
"parameter]s` by limiting the set of possible :t:`[generic "
"substitution]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2374
msgid ""
":dp:`fls_grby8tmmd8sb` A :t:`lifetime bound` is a :t:`bound` that imposes"
" a constraint on the :t:`[lifetime]s` of :t:`[generic parameter]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2378
msgid ""
":dp:`fls_knut10hoz6wc` A :t:`trait bound` is a :t:`bound` that imposes a "
"constraint on the :t:`[trait]s` of :t:`[generic parameter]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2382
msgid ""
":dp:`fls_sf6zg0ez9hbb` A :t:`ForGenericParameterList` shall not specify "
":s:`[ConstantParameter]s` or :s:`[TypeParameter]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2386
msgid ""
":dp:`fls_vujl3fblz6x2` A :t:`higher-ranked trait bound` is a :t:`bound` "
"that specifies an infinite list of :t:`[bound]s` for all possible "
":t:`[lifetime]s` specified by the ``ForGenericParameterList.``"
msgstr ""

#: ../../src/types-and-traits.rst:2391
msgid ""
":dp:`fls_tx4uspewnk7w` :t:`Bound` ``'a: 'b`` is read as ``'a`` outlives "
"``'b``, or in other words, ``'a`` lasts as long as ``'b``."
msgstr ""

#: ../../src/types-and-traits.rst:2395
msgid ""
":dp:`fls_5kj8bmvb8xfc` :t:`Bound` ``T: 'a`` indicates that all "
":t:`[lifetime parameter]s` of ``T`` outlive ``'a``."
msgstr ""

#: ../../src/types-and-traits.rst:2408
msgid "Lifetime"
msgstr ""

#: ../../src/types-and-traits.rst:2425
msgid ""
":dp:`fls_nne91at3143t` A :t:`lifetime` specifies the expected longevity "
"of a :t:`value`."
msgstr ""

#: ../../src/types-and-traits.rst:2428
msgid ""
":dp:`fls_vbclxg9dq4yo` A :t:`lifetime bound` shall apply to :t:`[type]s` "
"and other :t:`[lifetime]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2438
msgid ""
":dp:`fls_gcszhqg6hnva` See :p:`4.12. <fls_t515k9ywp2rd>` for the "
"declaration of Shape."
msgstr ""

#: ../../src/types-and-traits.rst:2444
msgid "Subtyping and Variance"
msgstr ""

#: ../../src/types-and-traits.rst:2448
msgid ""
":dp:`fls_atq2cltx487m` :t:`Subtyping` is a property of :t:`[type]s`, "
"allowing one :t:`type` to be used where another :t:`type` is expected."
msgstr ""

#: ../../src/types-and-traits.rst:2452
msgid ""
":dp:`fls_df87d44kgwcv` :t:`Variance` is a property of :t:`[lifetime "
"parameter]s` and :t:`[type parameter]s` that describes the circumstances "
"under which a :t:`generic type` is a :t:`subtype` of an instantiation of "
"itself with different :t:`[generic argument]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2458
msgid ":dp:`fls_7ex941yysuhq` A :t:`type` is its own :t:`subtype`."
msgstr ""

#: ../../src/types-and-traits.rst:2461
msgid ":dp:`fls_7qud6i05ze2` ``F<T>`` is said to be"
msgstr ""

#: ../../src/types-and-traits.rst:2464
msgid ""
":dp:`fls_wpm0p0gtctvi` :dt:`Covariant` over ``T`` when ``T`` being a "
":t:`subtype` of ``U`` implies that ``F<T>`` is a :t:`subtype` of "
"``F<U>``, or"
msgstr ""

#: ../../src/types-and-traits.rst:2468
msgid ""
":dp:`fls_3rfs58i2kg6l` :dt:`Contravariant` over ``T`` when ``T`` being a "
":t:`subtype` of ``U`` implies that ``F<U>`` is a :t:`subtype` of "
"``F<T>``, or"
msgstr ""

#: ../../src/types-and-traits.rst:2472
msgid ":dp:`fls_kbo3e3bosr0m` :dt:`Invariant` over ``T``."
msgstr ""

#: ../../src/types-and-traits.rst:2475
msgid ":dp:`fls_n36p6w2a75sm` :t:`Variance` is determined as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:2480
msgid ":dp:`fls_xw7eo3us0ow4`"
msgstr ""

#: ../../src/types-and-traits.rst:2482
msgid "**Variance in 'a**"
msgstr ""

#: ../../src/types-and-traits.rst:2483
msgid "**Variance in T**"
msgstr ""

#: ../../src/types-and-traits.rst:2484
msgid ":dp:`fls_qc6jma5g9vpn`"
msgstr ""

#: ../../src/types-and-traits.rst:2485
msgid "``&'a T``"
msgstr ""

#: ../../src/types-and-traits.rst:2486 ../../src/types-and-traits.rst:2487
#: ../../src/types-and-traits.rst:2490 ../../src/types-and-traits.rst:2495
#: ../../src/types-and-traits.rst:2503 ../../src/types-and-traits.rst:2507
#: ../../src/types-and-traits.rst:2511 ../../src/types-and-traits.rst:2527
#: ../../src/types-and-traits.rst:2530
msgid ":t:`covariant`"
msgstr ""

#: ../../src/types-and-traits.rst:2488
msgid ":dp:`fls_hpiiwxzg16rj`"
msgstr ""

#: ../../src/types-and-traits.rst:2489
msgid "``&'a mut T``"
msgstr ""

#: ../../src/types-and-traits.rst:2491 ../../src/types-and-traits.rst:2499
#: ../../src/types-and-traits.rst:2519 ../../src/types-and-traits.rst:2523
#: ../../src/types-and-traits.rst:2531
msgid ":t:`invariant`"
msgstr ""

#: ../../src/types-and-traits.rst:2492
msgid ":dp:`fls_aspdlqluwh9w`"
msgstr ""

#: ../../src/types-and-traits.rst:2493
msgid "``*const T``"
msgstr ""

#: ../../src/types-and-traits.rst:2496
msgid ":dp:`fls_8ohuze7hqtc1`"
msgstr ""

#: ../../src/types-and-traits.rst:2497
msgid "``*mut T``"
msgstr ""

#: ../../src/types-and-traits.rst:2500
msgid ":dp:`fls_7pkqgxabojkn`"
msgstr ""

#: ../../src/types-and-traits.rst:2501
msgid "``[T]``"
msgstr ""

#: ../../src/types-and-traits.rst:2504
msgid ":dp:`fls_ln9pqd4xu5e`"
msgstr ""

#: ../../src/types-and-traits.rst:2505
msgid "``[T; N]``"
msgstr ""

#: ../../src/types-and-traits.rst:2508
msgid ":dp:`fls_z4jo3ojkcu9v`"
msgstr ""

#: ../../src/types-and-traits.rst:2509
msgid "``fn() -> T``"
msgstr ""

#: ../../src/types-and-traits.rst:2512
msgid ":dp:`fls_67w6yslr3e25`"
msgstr ""

#: ../../src/types-and-traits.rst:2513
msgid "``fn(T) -> ()``"
msgstr ""

#: ../../src/types-and-traits.rst:2515
msgid ":t:`contravariant`"
msgstr ""

#: ../../src/types-and-traits.rst:2516
msgid ":dp:`fls_ojal3qytkqql`"
msgstr ""

#: ../../src/types-and-traits.rst:2517
msgid "``fn(T) -> T``"
msgstr ""

#: ../../src/types-and-traits.rst:2520
msgid ":dp:`fls_owp42z12l4lc`"
msgstr ""

#: ../../src/types-and-traits.rst:2521
msgid "``core::call::UnsafeCell<T>``"
msgstr ""

#: ../../src/types-and-traits.rst:2524
msgid ":dp:`fls_i1vuix3gj9ej`"
msgstr ""

#: ../../src/types-and-traits.rst:2525
msgid "``core::marker::PhantomData<T>``"
msgstr ""

#: ../../src/types-and-traits.rst:2528
msgid ":dp:`fls_mlf39pl0b931`"
msgstr ""

#: ../../src/types-and-traits.rst:2529
msgid "``dyn Trait<T> + 'a``"
msgstr ""

#: ../../src/types-and-traits.rst:2533
msgid ""
":dp:`fls_yknymnlsasyw` A :t:`trait` is :t:`invariant` in all inputs, "
"including the :t:`Self` parameter."
msgstr ""

#: ../../src/types-and-traits.rst:2536
msgid ""
":dp:`fls_xkzo7nj40rbn` :t:`[Lifetime parameter]s` and :t:`[type "
"parameter]s` are subject to :t:`variance`."
msgstr ""

#: ../../src/types-and-traits.rst:2540
msgid ""
":dp:`fls_abn5ycx11zpm` The :t:`variance` of a :t:`generic parameter` of "
"an :t:`abstract data type` or an :t:`tuple type` is determined as "
"follows:"
msgstr ""

#: ../../src/types-and-traits.rst:2544
msgid ":dp:`fls_hvfyog9ygn6q` For each :t:`generic parameter` ``G``"
msgstr ""

#: ../../src/types-and-traits.rst:2547
msgid ""
":dp:`fls_mduolmcawb30` Initialize :t:`variance` ``V`` of the :t:`generic "
"parameter` to ``any``."
msgstr ""

#: ../../src/types-and-traits.rst:2550
msgid ""
":dp:`fls_y81gmqweqc9w` For each :t:`field` of the :t:`abstract data type`"
" or the :t:`tuple type`"
msgstr ""

#: ../../src/types-and-traits.rst:2553
msgid ":dp:`fls_etgfvgvymn8o` If :t:`field` :t:`type` ``T`` uses ``G``, then"
msgstr ""

#: ../../src/types-and-traits.rst:2556
msgid ""
":dp:`fls_4kjxxrsk1igf` If ``V`` is ``any``, set ``V`` to the "
":t:`variance` of ``T`` over ``G``."
msgstr ""

#: ../../src/types-and-traits.rst:2560
msgid ""
":dp:`fls_y4zmb3vrym7p` Otherwise if ``V`` and the :t:`variance` of ``T`` "
"over ``G`` differ, set ``V`` to :t:`invariant`."
msgstr ""

#: ../../src/types-and-traits.rst:2564
msgid ""
":dp:`fls_9ae3idezsths` It is a static error if :t:`variance` ``V`` is "
"``any``."
msgstr ""

#: ../../src/types-and-traits.rst:2570
msgid "Lifetime Elision"
msgstr ""

#: ../../src/types-and-traits.rst:2574
msgid ""
":dp:`fls_9wtuclhm7yz5` :t:`Lifetime elision` is a set of relaxations on "
"the use of :t:`[lifetime]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2577
msgid ""
":dp:`fls_dpudys82dhdc` An :dt:`input lifetime` is one of the following "
":t:`[lifetime]s`:"
msgstr ""

#: ../../src/types-and-traits.rst:2580
msgid ""
":dp:`fls_pjil71kk0r25` Any :t:`lifetime` related to a :t:`function "
"parameter`."
msgstr ""

#: ../../src/types-and-traits.rst:2583
msgid ""
":dp:`fls_1jnn9bsb71k7` Any :t:`lifetime` related to a :t:`function "
"pointer type parameter`."
msgstr ""

#: ../../src/types-and-traits.rst:2586
msgid ""
":dp:`fls_2p29p1fvi182` Any :t:`lifetime` related to the :t:`[function "
"parameter]s` of the :std:`core::ops::Fn`, :std:`core::ops::FnMut`, and "
":std:`core::ops::FnOnce` :t:`[trait]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2591
msgid ""
":dp:`fls_ks8wlufmhz6d` Any :t:`lifetime` related to an :t:`implementing "
"type` and an :t:`implemented trait` of an :t:`implementation`."
msgstr ""

#: ../../src/types-and-traits.rst:2595
msgid ""
":dp:`fls_hsg9kfyvh35m` An :dt:`output lifetime` is one of the following "
":t:`[lifetime]s`:"
msgstr ""

#: ../../src/types-and-traits.rst:2598
msgid ""
":dp:`fls_ofqy10q4a9jk` Any :t:`lifetime` related to the :t:`return type` "
"of a :t:`function`."
msgstr ""

#: ../../src/types-and-traits.rst:2601
msgid ""
":dp:`fls_yofbo96tjppf` Any :t:`lifetime` related to the :t:`return type` "
"of a :t:`function pointer type`."
msgstr ""

#: ../../src/types-and-traits.rst:2605
msgid ""
":dp:`fls_vf7cxiir91ps` Any :t:`lifetime` related to the :t:`[return "
"type]s` of the :std:`core::ops::Fn`, :std:`core::ops::FnMut`, and "
":std:`core::ops::FnOnce` :t:`[trait]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2610
msgid ":dp:`fls_g56br27hq2zj` :t:`Lifetime elision` proceeds as follows:"
msgstr ""

#: ../../src/types-and-traits.rst:2613
msgid ""
":dp:`fls_1j204m1wy333` Each :t:`elided` :t:`input lifetime` is a distinct"
" :t:`lifetime parameter` in its related :t:`construct`."
msgstr ""

#: ../../src/types-and-traits.rst:2617
msgid ""
":dp:`fls_6km3cbchuxr2` If a :t:`construct` has exactly one :t:`input "
"lifetime`, then that :t:`lifetime` is assigned to all :t:`elided` "
":t:`[output lifetime]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2621
msgid ""
":dp:`fls_crb6m6b3cdwh` If a :t:`function` has a :t:`receiver` of the form"
" ``&self``, ``&mut self``, or ``self: T`` where ``T`` is a :t:`type` with"
" a :t:`lifetime`, then the :t:`lifetime` of the :t:`receiver` is assigned"
" to all :t:`elided` :t:`[output lifetime]s`."
msgstr ""

#: ../../src/types-and-traits.rst:2627
msgid ":dp:`fls_ac9tdlfwp5et` Otherwise this is a static error."
msgstr ""

#: ../../src/types-and-traits.rst:2630
msgid ""
":dp:`fls_37udexenqv3p` The :t:`lifetime` of an :t:`associated "
"implementation constant` shall not be :t:`elided`."
msgstr ""

#: ../../src/types-and-traits.rst:2634
msgid ""
":dp:`fls_xi86he5vvill` The :t:`lifetime` of an :t:`associated trait "
"constant` shall not be :t:`elided`."
msgstr ""

#: ../../src/types-and-traits.rst:2639
msgid ":dp:`fls_qtjc7334wzhj` Given function ``f`` of the form"
msgstr ""

#: ../../src/types-and-traits.rst:2646
msgid ":dp:`fls_vcmmkp9uruhr` its lifetime elided form is"
msgstr ""

